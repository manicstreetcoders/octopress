---
layout: post
title: "Significant Flash exploit mitigations are live in v18.0.0.209"
date: 2015-07-17 15:38:05 +0900
comments: true
categories: 
---

Project Zero 의 Flash mitigation 에 관한 글을 요약 정리해본다.

이번에 버전업된 18.0.0.209 의 경우.

[Significant Flash exploit mitigations are live v18.0.0.209](http://googleprojectzero.blogspot.kr/2015/07/significant-flash-exploit-mitigations_16.html)

#### 최근의 Flash exploit 경향

heap 에서 앞쪽의 버퍼를 overflow 시켜서, 뒤쪽에 위치한 `Vector.<uint>` 를 overwrite 한다. `Vector.<uint>` 의 앞 4 바이트는 `length` 이다. 이 `length` 를 무지하게 큰 수로 만들어서 메모리 대부분을 read/write 할 수 있는 list 를 만든다.

또는 use-after-free 를 이용해서 `Vector.<uint>` 의 `length` 를 overwrite 한다. ByteArray 로 heap chunk 를 pointing 하게 셋업하고, free 시키고 `Vector.<uint>` 를 그 자리에 alloc 하고, 앞서 만든 ByteArray pointer 를 사용해 memory write 를 만들어낸다. 원래 heap chunk 는 free 되버리고, 이상한 녀석이 그 자리에 들어와있는데, memory write 가 일어나니, `Vector.<uint>` 의 `length` 에 write 가 일어나버리고, 역시 마찬가지로 `length` 가 무지하게 커져버린 전천후 list 가 만들어진다.

최근 공개된 Hacking Team 의 Flash 0day 들도 비슷한 use-after-free 방식.

#### Mitigation: `Vector.<uint>` buffer heap partitioning

Adobe Flash 18.0.0.209 에서는 Heap partitioning 을 도입했다. `Vector.<uint>` 가 alloc 되는 heap 을 별도로 마련한것. 

```
    _bigVec = new Vector.<uint>;
    _bigVec.length = ((512 * 1024 * 1024) - 500) / 4;
    _bigVec[0] = 0xf2f2f2f2;
    _bigArr = new ByteArray();
    _bigArr.length = 512 * 1024 * 1024;
    _bigArr[0] = 0xf1;
```

을 해서, 프로세스 메모리 맵을 보면 `_bigVec` 과 `_bigArr` 는 꽤 떨어진 영역에 위치하게 된다.

#### Mitigations: stronger randomization for the Flash heap

#### Mitigations: `Vector.<*>` length validation
