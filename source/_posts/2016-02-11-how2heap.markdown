---
layout: post
title: "how2heap"
date: 2016-02-11 17:45:34 +0900
comments: true
categories: 
---

shellphish team 에서 github 에 공개한 [Educational Heap Exploitation](https://github.com/shellphish/how2heap) 을 정리한다.

* [Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)

### first_fit.c

[first_fit.c](https://github.com/shellphish/how2heap/blob/master/first_fit.c)

malloc() allocator 의 behavior 때문에 생기는 use after free 상황을 설명하기 위한 예제.

malloc() 후에, free() 하고 다시 malloc() 을 했더니, 두 개의 포인터가 동일한 위치를 가리킨다. 편의상 포인터를 A,B 라고 하자. A 는 free 된 포인터, B 는 legitimate 한 포인터. B 를 통해 메모리 내용을 조작한다음에 A 가 사용되면 A object 의 context 에서 메모리내용이 해석되기때문에, 의도치않은 코드가 수행될 수 있다.

### unsafe_unlink.c

[unsafe_unlink.c](https://github.com/shellphish/how2heap/blob/master/unsafe_unlink.c)

### house_of_spirit.c

[house of spirit](https://github.com/shellphish/how2heap/blob/master/house_of_spirit.c)

House of spirit 공격을 설명하기 위한 예제.

House of spirit 공격을 요약하면.

* House of spirit 공격은 다른 heap 공격과는 달리, 메타데이터를 overwrite 하는 것이 목적이 아니다.
* malloc() 에서 return 되는 address 를 컨트롤 할 수 있다.
* `p = malloc(...); memcpy(p, user_supplied_data, 128);` 에서 p 의 값을 컨트롤 할 수 있다면, code execution 은 어렵지 않다. 임의의 주소에 임의의 값을 쓸 수 있는 primitive 를 얻게 되는 셈이니.
* p 를 컨트롤하는 방법은, 가짜 chunk 주소를 fastbin 에 밀어넣어서, 다음 malloc 때 저 chunk 가 리턴되게 하는 것.
* 가짜 chunk 주소를 fastbin 에 밀어넣는 방법은, free() 를 통해서.
* 정상적으로 malloc() 을 통해서 받아온 pointer `p` 를 free() 의 인자로 주는 것이 아니라, 공격하고 싶은 메모리 주소를 fastbin 에 밀어넣기 위한 조작된 데이터를 free() 의 인자로 넘긴다.
* 즉 `free(a); p = malloc(128); memcpy(p, user_supplied_data, 128);` 라는 시퀀스를 공격하는 것이다.

즉 요약하면, `dlmalloc` 이나, `glmalloc` 등이 OS 에서 `sbrk()` 나 `mmap()` 으로 받아온 메모리가 아니라, 임의의 메모리가 malloc() 의 리턴값으로 떨어지게 만드는 공격 방법. 이를 레버리지해서 임의의 주소에 원하는 값을 쓰는 식으로 발전한다.

* [GB_MASTER's /dev/null](https://gbmaster.wordpress.com/2015/07/21/x86-exploitation-101-house-of-spirit-friendly-stack-overflow/)

blackngel & gb_master 의 vuln.c 를 들여다봤다.

```
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void fvuln(char *str1, int age)
{
	char *ptr1, name[32];
	int local_age;
	char *ptr2;

	local_age = age;

	ptr1 = (char *) malloc(256);
	printf("PTR1 = [ %p ]\n", ptr1);
	strcpy(name, str1); // <----- (1)
	printf("PTR1 = [ %p ]\n", ptr1);
	free(ptr1); // <----- (2)

	ptr2 = (char *) malloc(40); // <----- (3)
	snprintf(ptr2, 40-1, "%s is %d years old", name, local_age); // <----- (4)
	printf("%s\n", ptr2);
}
int main(int argc, char *argv[])
{
	int pad[10] = { 0,0,0,0,0,0,0,10,0,0};
	if (argc == 3)
		fvuln(argv[1], atoi(argv[2]));
	return 0;
}
```

Malloc Des-Maleficarum 의 흐름을 정리하면,

* (1) 에서 ptr1 에 대한 overwrite 가 일어난다.
* (2) 에서 잘못된 주소가 fastbin 에 들어간다.
* (3) 에서 (2) 의 주소가 return 된다.
* (4) 에서 잘못된 주소에 잘못된 데이터가 써진다.

이걸 exploit 하기 위해, 저자는 ASLR off, noexec=off, GCC stack protection off 를 해주었다고. 그리고, stack 의 return address 를 overwrite 했음.

우선 ptr1 overwrite 를 테스트하기 위해,

```
$ ./hos `perl -e 'print "A"x32 . "BBBB" . "CCCC"'` 20
PTR1 = [ 0x804b008 ]
PTR1 = [ 0x43434343 ]
Segmentation fault
```

메모리 주소들을 떠보면, (저자는 PTR2 가 왜 저기 끼어들어갔는지 모르겠다고, gcc 탓을 한다)

```
RET		-> 0xFFFFCF2C 
EBP		-> 0xFFFFCF28
local_age	-> 0xFFFFCF24 (overwritten with a NUL)
PTR1		-> 0xFFFFCF20 [0x43434343]에 위치
PTR2		-> 0xFFFFCF1C [0x42424242]
name		-> 0xFFFFCEFC
```

즉, name[32] 가 overflow 나서, ptr1 & ptr2 가 overwrite 된 상황.

* chunk 주소를 0xffffCF20 으로 하고, ptr1 을 0xffffCF28 로 (+8) overwrite 하면
* chunk->size 의 주소는 0xffffCF24 가 되고, 여기를 0x30 으로 overwrite 시켜야함.
* 두번째 malloc() 에서는 0xffffCF28 이 돌아오게 될 것임
* `snprintf(0xffffCF28, 39, "%s ...", name, ...)` 이 되니까, RET 를 overwrite 하기 위해서는 name[4],name[5],name[6],name[7] 에 원하는 return 주소가 담겨야함. 즉 RET 를 0xffffCEFC (name 이 위치한 곳) 로 overwrite. 그리고 이 주소에 shellcode 도입부가 위치함.
* 쉘코드는 "4 bytes JMP 코드 + 4 byte the new RET value + shellcode" 로 구성.
